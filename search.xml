<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[PhotoBatch-文件操作(1)]]></title>
      <url>%2F2017%2F11%2F26%2FPhotoBatch-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-1%2F</url>
      <content type="text"><![CDATA[最近开始自学mac app开发，网上资料很少，大致看了一下官方文档，mac开发主要框架就是AppKit，我有几年iOS的开发经验，在加上官方文档和网上一些零碎的资料，慢慢学习应该是问题不大。准备自己动手制作一个批量图片处理软件，记录一下自己的学习过程，一方面帮助自己对学到知识的整理，也可以给学习macOS的人一些参考。 文件拖拽 需要实现的效果：将文件或者文件夹拖到到我们的app内，获得其绝对路径 新建 macOS 工程跟新建iOS项目工程几乎一致。 自定义PBDragView在iOS中，最核心的的框架就是Foundation和UIKit, 在macOS中，就是Foundation和AppKit, 对于iOS中大部分控件，都是把前缀又UI换成了NS, 他们看上去很类似，但是使用的时候在很多细节上却又大不相同，这里推荐一篇博客从 UIKit 到 AppKit(https://www.objccn.io/issue-14-5), 讲述了这两个框架的一些异同。 我们需要自定义一个 PBDragView 继承自NSView，然后当有文件或者文件夹拖动到这个View中的时候，在内部实现文件拖入拖出等方法。 注册支持的文件类型123456789- (void)awakeFromNib&#123; [super awakeFromNib]; // 设置支持的文件类型 [self registerForDraggedTypes:@[NSPasteboardTypePDF, NSPasteboardTypePNG, NSPasteboardTypeURL, NSPasteboardTypeFileURL]];&#125;``` ##### 实现文件拖动的几个方法 (NSDragOperation)draggingEntered:(id)sender{ if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(dragEnter)]) { [self.delegate dragEnter]; } return NSDragOperationGeneric;} (void)draggingExited:(id)sender{ if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(dragExit)]) { [self.delegate dragExit]; }} (BOOL)performDragOperation:(id)sender{ // 获取所有的路径 NSArray *arr = [[sender draggingPasteboard] propertyListForType:NSFilenamesPboardType]; if (self.delegate &amp;&amp; arr.count &gt; 0 &amp;&amp; [self.delegate respondsToSelector:@selector(dragFileComplete:)]) { [self.delegate dragFileComplete:arr]; } return YES;} 123456789101112131415161718##### 在SB中使用PBDragView![sb的效果图](https://raw.githubusercontent.com/suifengqjn/demoimages/master/PhotoBatch/2.png)运行程序，将文件或者文件夹拖入整个app界面，就可以获取到所有的文件路径。### 文件选择* 需要实现的效果：点击按钮，弹出文件选择框，可以选择文件或者文件夹#### 添加点击按钮在SB中添加按钮，然后添加点击事件![添加按钮](https://raw.githubusercontent.com/suifengqjn/demoimages/master/PhotoBatch/3.png)#### 文件选择功能实现 NSOpenPanel *openPanel = [NSOpenPanel openPanel]; [openPanel setPrompt: @”打开”]; [openPanel setCanChooseDirectories:YES]; //设置允许打开文件夹 [openPanel setAllowsMultipleSelection:YES]; // 会否允许打开多个目录 [openPanel setCanChooseFiles:YES]; //设置允许打开文件 [openPanel setCanCreateDirectories:YES]; // 允许新建文件夹 [openPanel setCanDownloadUbiquitousContents:NO]; //是否处理还未下载成功的文档 [openPanel setCanResolveUbiquitousConflicts:NO]; //是否处理有冲突的文档 openPanel.allowedFileTypes = [NSArray arrayWithObjects: @”jpg”, @”doc”,@”txt”,@”jpeg”,@”png”,@”tiff”, nil]; //设置允许打开的文件类型 [openPanel beginSheetModalForWindow:[NSApplication sharedApplication].keyWindow completionHandler:^(NSModalResponse result) { NSArray *filePaths = [openPanel URLs]; NSLog(@&quot;-----%@&quot;, filePaths); }];```效果图： demo地址:https://github.com/macOSApp/photoBatch]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Gif播放与暂停]]></title>
      <url>%2F2017%2F11%2F14%2FGif%E6%92%AD%E6%94%BE%E4%B8%8E%E6%9A%82%E5%81%9C%2F</url>
      <content type="text"><![CDATA[gif播放的两种方式UIWebView这应该是播放gif文件最简单的方式了，缺点：无法暂停播放 12345678910//1. 把gif文件 转化成 dataguard let dataPath = Bundle.main.path(forResource: &quot;demo&quot;, ofType: &quot;gif&quot;) else &#123; return &#125;guard let gifData = NSData(contentsOfFile: dataPath) else &#123; return &#125;//2. 给UIWebView 设置datalet webview = UIWebView()webview.frame = CGRect(x: 0, y: 300, width: self.view.frame.size.width, height: 200)webview.scalesPageToFit = truewebview.load(gifData as Data, mimeType: &quot;image/gif&quot;, textEncodingName: String(), baseURL: NSURL() as URL)self.view.addSubview(webview) UIImageView这里面有两个要点，一是从gif文件中获取图片数组，二是获取gif文件播放时长 12345678910111213141516171819202122232425262728293031323334353637383940let imageView = UIImageView()imageView.frame = CGRect(x: 0, y: 50, width: self.view.frame.size.width, height: 200)self.view.addSubview(imageView)// 1. 把gif文件 转化成 dataguard let dataPath = Bundle.main.path(forResource: &quot;demo&quot;, ofType: &quot;gif&quot;) else &#123; return &#125;guard let gifData = NSData(contentsOfFile: dataPath) else &#123; return &#125;// 2. 把data 转换成CGImageSource 对象guard let imageSource = CGImageSourceCreateWithData(gifData, nil) else &#123; return &#125;// 2.1 获取图片的个数let imageCount = CGImageSourceGetCount(imageSource)var images = [UIImage]()var gifDuration : TimeInterval = 0// 3. 遍历所有的图片for i in 0..&lt;imageCount &#123; // 3.1 取出图片 guard let cgimage = CGImageSourceCreateImageAtIndex(imageSource, i, nil) else &#123; return &#125; let image = UIImage(cgImage: cgimage) images.append(image) if (i == 0) &#123; imageView.image = image &#125; // 3.1 取出每张图片持续的时间 guard let property = CGImageSourceCopyPropertiesAtIndex(imageSource, i, nil) as? NSDictionary else &#123; continue &#125; guard let gifDic = property[kCGImagePropertyGIFDictionary] as? NSDictionary else &#123; continue &#125; guard let imageDuration = gifDic[kCGImagePropertyGIFDelayTime] as? NSNumber else &#123; continue &#125; gifDuration += imageDuration.doubleValue&#125;// 4.设置images属性imageView.animationImages = imagesimageView.animationDuration = gifDurationimageView.animationRepeatCount = 1// 5. 开始播放imageView.startAnimating() Gif暂停实现]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS三种录制视频方式详细对比]]></title>
      <url>%2F2017%2F03%2F22%2FiOS%E4%B8%89%E7%A7%8D%E5%BD%95%E5%88%B6%E8%A7%86%E9%A2%91%E6%96%B9%E5%BC%8F%E8%AF%A6%E7%BB%86%E5%AF%B9%E6%AF%94%2F</url>
      <content type="text"><![CDATA[先附上参考资料http://www.jianshu.com/p/16cb14f53933 https://developer.apple.com/library/content/samplecode/AVSimpleEditoriOS/Introduction/Intro.html https://github.com/objcio/VideoCaptureDemo https://github.com/gsixxxx/DTSmallVideo https://github.com/AndyFightting/VideoRecord 卷首吐槽语这还是第一次接触自定义界面录制视频，包括各种参数的设置，不得不说，录制视频这块，各种类，各种方法，蛮复杂的，网上的资料也是各种杂乱，想要弄清楚还真是得费一番功夫，我参考了大量资料，根据自己的思路整理了一遍，按照我的思路来，保证你看一遍就会，我这里只是简单的录制，压缩，剪裁，导出等功能，不设计滤镜，添加背景音乐，合并，字幕等等，重要的是这个流程，主流程会了，其他也就是锦上添花了。 先附上dome demo地址 脑图方便大家对三中录制方式有一个大概的了解，看一下这张图片。第一种采用系统的录制较为简单，详细介绍后面两种。 效果图 demo中把三种方式单独分开，便于学习。支持闪光灯，切换镜头，录制不同尺寸的视频等。 1.UIImagePickerController这种方式只能设置一些简单参数，自定义程度不高,只能自定义界面上的操作按钮，还有视频的画质等。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647- (void)viewDidLoad&#123; [super viewDidLoad]; if ([self isVideoRecordingAvailable]) &#123; return; &#125; self.sourceType = UIImagePickerControllerSourceTypeCamera; self.mediaTypes = @[(NSString *)kUTTypeMovie]; self.delegate = self; //隐藏系统自带UI self.showsCameraControls = NO; //设置摄像头 [self switchCameraIsFront:NO]; //设置视频画质类别 self.videoQuality = UIImagePickerControllerQualityTypeMedium; //设置散光灯类型 self.cameraFlashMode = UIImagePickerControllerCameraFlashModeAuto; //设置录制的最大时长 self.videoMaximumDuration = 20;&#125;- (BOOL)isVideoRecordingAvailable&#123; if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera])&#123; NSArray *availableMediaTypes = [UIImagePickerController availableMediaTypesForSourceType:UIImagePickerControllerSourceTypeCamera]; if([availableMediaTypes containsObject:(NSString *)kUTTypeMovie])&#123; return YES; &#125; &#125; return NO;&#125;- (void)switchCameraIsFront:(BOOL)front&#123; if (front) &#123; if([UIImagePickerController isCameraDeviceAvailable:UIImagePickerControllerCameraDeviceFront])&#123; [self setCameraDevice:UIImagePickerControllerCameraDeviceFront]; &#125; &#125; else &#123; if([UIImagePickerController isCameraDeviceAvailable:UIImagePickerControllerCameraDeviceRear])&#123; [self setCameraDevice:UIImagePickerControllerCameraDeviceRear]; &#125; &#125;&#125; 2.AVCaptureSession+AVCaptureMovieFileOutput流程：1234561. 创建捕捉会话2. 设置视频的输入3. 设置音频的输入4. 输出源设置,这里视频，音频数据会合并到一起输出，在代理方法中国也可以单独拿到视频或者音频数据，给AVCaptureMovieFileOutput指定路径，开始录制之后就会向这个路径写入数据5. 添加视频预览层6. 开始采集数据，这个时候还没有写入数据，用户点击录制后就可以开始写入数据 0. 创建捕捉会话1234self.session = [[AVCaptureSession alloc] init]; if ([_session canSetSessionPreset:AVCaptureSessionPreset640x480]) &#123;//设置分辨率 _session.sessionPreset=AVCaptureSessionPreset640x480; &#125; 1. 视频的输入123456789101112131415161718 - (void)setUpVideo&#123; // 1.1 获取视频输入设备(摄像头) AVCaptureDevice *videoCaptureDevice=[self getCameraDeviceWithPosition:AVCaptureDevicePositionBack];//取得后置摄像头 // 视频 HDR (高动态范围图像) // videoCaptureDevice.videoHDREnabled = YES; // 设置最大，最小帧速率 //videoCaptureDevice.activeVideoMinFrameDuration = CMTimeMake(1, 60); // 1.2 创建视频输入源 NSError *error=nil; self.videoInput= [[AVCaptureDeviceInput alloc] initWithDevice:videoCaptureDevice error:&amp;error]; // 1.3 将视频输入源添加到会话 if ([self.session canAddInput:self.videoInput]) &#123; [self.session addInput:self.videoInput]; &#125;&#125; 2. 音频的输入123456789// 2.1 获取音频输入设备 AVCaptureDevice *audioCaptureDevice=[[AVCaptureDevice devicesWithMediaType:AVMediaTypeAudio] firstObject]; NSError *error=nil; // 2.2 创建音频输入源 self.audioInput = [[AVCaptureDeviceInput alloc] initWithDevice:audioCaptureDevice error:&amp;error]; // 2.3 将音频输入源添加到会话 if ([self.session canAddInput:self.audioInput]) &#123; [self.session addInput:self.audioInput]; &#125; 3.输出源设置1234567891011121314151617181920- (void)setUpFileOut&#123; // 3.1初始化设备输出对象，用于获得输出数据 self.FileOutput=[[AVCaptureMovieFileOutput alloc]init]; // 3.2设置输出对象的一些属性 AVCaptureConnection *captureConnection=[self.FileOutput connectionWithMediaType:AVMediaTypeVideo]; //设置防抖 //视频防抖 是在 iOS 6 和 iPhone 4S 发布时引入的功能。到了 iPhone 6，增加了更强劲和流畅的防抖模式，被称为影院级的视频防抖动。相关的 API 也有所改动 (目前为止并没有在文档中反映出来，不过可以查看头文件）。防抖并不是在捕获设备上配置的，而是在 AVCaptureConnection 上设置。由于不是所有的设备格式都支持全部的防抖模式，所以在实际应用中应事先确认具体的防抖模式是否支持： if ([captureConnection isVideoStabilizationSupported ]) &#123; captureConnection.preferredVideoStabilizationMode=AVCaptureVideoStabilizationModeAuto; &#125; //预览图层和视频方向保持一致 captureConnection.videoOrientation = [self.previewlayer connection].videoOrientation; // 3.3将设备输出添加到会话中 if ([_session canAddOutput:_FileOutput]) &#123; [_session addOutput:_FileOutput]; &#125;&#125; 4. 视频预览层一进入视频录制界面，这个时候 session就已经在采集数据了，并把数据显示在预览层上，用户选择录制后，再将采集到的数据写入文件。1234567891011121314151617181920 - (void)setUpPreviewLayerWithType:(FMVideoViewType )type&#123; CGRect rect = CGRectZero; switch (type) &#123; case Type1X1: rect = CGRectMake(0, 0, kScreenWidth, kScreenWidth); break; case Type4X3: rect = CGRectMake(0, 0, kScreenWidth, kScreenWidth*4/3); break; case TypeFullScreen: rect = [UIScreen mainScreen].bounds; break; default: rect = [UIScreen mainScreen].bounds; break; &#125; self.previewlayer.frame = rect; [_superView.layer insertSublayer:self.previewlayer atIndex:0];&#125; 5. 开始采集画面1[self.session startRunning]; 6.开始录制1234567- (void)writeDataTofile&#123; NSString *videoPath = [self createVideoFilePath]; self.videoUrl = [NSURL fileURLWithPath:videoPath]; [self.FileOutput startRecordingToOutputFileURL:self.videoUrl recordingDelegate:self]; &#125; 3.AVCaptureSession+AVAssetWriter流程：1234561. 创建捕捉会话2. 设置视频的输入 和 输出3. 设置音频的输入 和 输出4. 添加视频预览层5. 开始采集数据，这个时候还没有写入数据，用户点击录制后就可以开始写入数据6. 初始化AVAssetWriter, 我们会拿到视频和音频的数据流，用AVAssetWriter写入文件，这一步需要我们自己实现。 1. 创建捕捉会话需要确保在同一个队列，最好队列只创建一次1234self.session = [[AVCaptureSession alloc] init]; if ([_session canSetSessionPreset:AVCaptureSessionPreset640x480]) &#123;//设置分辨率 _session.sessionPreset=AVCaptureSessionPreset640x480; &#125; 2.设置视频的输入 和 输出1234567891011121314151617181920- (void)setUpVideo&#123; // 2.1 获取视频输入设备(摄像头) AVCaptureDevice *videoCaptureDevice=[self getCameraDeviceWithPosition:AVCaptureDevicePositionBack];//取得后置摄像头 // 2.2 创建视频输入源 NSError *error=nil; self.videoInput= [[AVCaptureDeviceInput alloc] initWithDevice:videoCaptureDevice error:&amp;error]; // 2.3 将视频输入源添加到会话 if ([self.session canAddInput:self.videoInput]) &#123; [self.session addInput:self.videoInput]; &#125; self.videoOutput = [[AVCaptureVideoDataOutput alloc] init]; self.videoOutput.alwaysDiscardsLateVideoFrames = YES; //立即丢弃旧帧，节省内存，默认YES [self.videoOutput setSampleBufferDelegate:self queue:self.videoQueue]; if ([self.session canAddOutput:self.videoOutput]) &#123; [self.session addOutput:self.videoOutput]; &#125; &#125; 3. 设置音频的输入 和 输出12345678910111213141516171819- (void)setUpAudio&#123; // 2.2 获取音频输入设备 AVCaptureDevice *audioCaptureDevice=[[AVCaptureDevice devicesWithMediaType:AVMediaTypeAudio] firstObject]; NSError *error=nil; // 2.4 创建音频输入源 self.audioInput = [[AVCaptureDeviceInput alloc] initWithDevice:audioCaptureDevice error:&amp;error]; // 2.6 将音频输入源添加到会话 if ([self.session canAddInput:self.audioInput]) &#123; [self.session addInput:self.audioInput]; &#125; self.audioOutput = [[AVCaptureAudioDataOutput alloc] init]; [self.audioOutput setSampleBufferDelegate:self queue:self.videoQueue]; if([self.session canAddOutput:self.audioOutput]) &#123; [self.session addOutput:self.audioOutput]; &#125; &#125; 4. 添加视频预览层123456789101112131415161718192021 - (void)setUpPreviewLayerWithType:(FMVideoViewType )type&#123; CGRect rect = CGRectZero; switch (type) &#123; case Type1X1: rect = CGRectMake(0, 0, kScreenWidth, kScreenWidth); break; case Type4X3: rect = CGRectMake(0, 0, kScreenWidth, kScreenWidth*4/3); break; case TypeFullScreen: rect = [UIScreen mainScreen].bounds; break; default: rect = [UIScreen mainScreen].bounds; break; &#125; self.previewlayer.frame = rect; [_superView.layer insertSublayer:self.previewlayer atIndex:0];&#125; 5. 开始采集画面1[self.session startRunning]; 6. 初始化AVAssetWriterAVAssetWriter 写入数据的过程需要在子线程中执行，并且每次写入数据都需要保证在同一个线程。1234567- (void)setUpWriter&#123; self.videoUrl = [[NSURL alloc] initFileURLWithPath:[self createVideoFilePath]]; self.writeManager = [[AVAssetWriteManager alloc] initWithURL:self.videoUrl viewType:_viewType]; self.writeManager.delegate = self; &#125; 7.拿到数据流后处理视频数据和音频数据需要分开处理1234567891011121314151617181920212223242526272829303132333435363738394041424344- (void)captureOutput:(AVCaptureOutput *)captureOutput didOutputSampleBuffer:(CMSampleBufferRef)sampleBuffer fromConnection:(AVCaptureConnection *)connection&#123; @autoreleasepool &#123; //视频 if (connection == [self.videoOutput connectionWithMediaType:AVMediaTypeVideo]) &#123; if (!self.writeManager.outputVideoFormatDescription) &#123; @synchronized(self) &#123; CMFormatDescriptionRef formatDescription = CMSampleBufferGetFormatDescription(sampleBuffer); self.writeManager.outputVideoFormatDescription = formatDescription; &#125; &#125; else &#123; @synchronized(self) &#123; if (self.writeManager.writeState == FMRecordStateRecording) &#123; [self.writeManager appendSampleBuffer:sampleBuffer ofMediaType:AVMediaTypeVideo]; &#125; &#125; &#125; &#125; //音频 if (connection == [self.audioOutput connectionWithMediaType:AVMediaTypeAudio]) &#123; if (!self.writeManager.outputAudioFormatDescription) &#123; @synchronized(self) &#123; CMFormatDescriptionRef formatDescription = CMSampleBufferGetFormatDescription(sampleBuffer); self.writeManager.outputAudioFormatDescription = formatDescription; &#125; &#125; @synchronized(self) &#123; if (self.writeManager.writeState == FMRecordStateRecording) &#123; [self.writeManager appendSampleBuffer:sampleBuffer ofMediaType:AVMediaTypeAudio]; &#125; &#125; &#125; &#125; &#125; 我们拿到最原始的数据以后，可以对其进行各种参数的设置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253- (void)setUpWriter&#123; self.assetWriter = [AVAssetWriter assetWriterWithURL:self.videoUrl fileType:AVFileTypeMPEG4 error:nil]; //写入视频大小 NSInteger numPixels = self.outputSize.width * self.outputSize.height; //每像素比特 CGFloat bitsPerPixel = 6.0; NSInteger bitsPerSecond = numPixels * bitsPerPixel; // 码率和帧率设置 NSDictionary *compressionProperties = @&#123; AVVideoAverageBitRateKey : @(bitsPerSecond), AVVideoExpectedSourceFrameRateKey : @(30), AVVideoMaxKeyFrameIntervalKey : @(30), AVVideoProfileLevelKey : AVVideoProfileLevelH264BaselineAutoLevel &#125;; //视频属性 self.videoCompressionSettings = @&#123; AVVideoCodecKey : AVVideoCodecH264, AVVideoScalingModeKey : AVVideoScalingModeResizeAspectFill, AVVideoWidthKey : @(self.outputSize.height), AVVideoHeightKey : @(self.outputSize.width), AVVideoCompressionPropertiesKey : compressionProperties &#125;; _assetWriterVideoInput = [AVAssetWriterInput assetWriterInputWithMediaType:AVMediaTypeVideo outputSettings:self.videoCompressionSettings]; //expectsMediaDataInRealTime 必须设为yes，需要从capture session 实时获取数据 _assetWriterVideoInput.expectsMediaDataInRealTime = YES; _assetWriterVideoInput.transform = CGAffineTransformMakeRotation(M_PI / 2.0); // 音频设置 self.audioCompressionSettings = @&#123; AVEncoderBitRatePerChannelKey : @(28000), AVFormatIDKey : @(kAudioFormatMPEG4AAC), AVNumberOfChannelsKey : @(1), AVSampleRateKey : @(22050) &#125;; _assetWriterAudioInput = [AVAssetWriterInput assetWriterInputWithMediaType:AVMediaTypeAudio outputSettings:self.audioCompressionSettings]; _assetWriterAudioInput.expectsMediaDataInRealTime = YES; if ([_assetWriter canAddInput:_assetWriterVideoInput]) &#123; [_assetWriter addInput:_assetWriterVideoInput]; &#125;else &#123; NSLog(@&quot;AssetWriter videoInput append Failed&quot;); &#125; if ([_assetWriter canAddInput:_assetWriterAudioInput]) &#123; [_assetWriter addInput:_assetWriterAudioInput]; &#125;else &#123; NSLog(@&quot;AssetWriter audioInput Append Failed&quot;); &#125; self.writeState = FMRecordStateRecording;&#125; 设置好参数以后，就可以写入文件了。AVAssetWriter数据写入的过程有点复杂，demo中我新建AVAssetWriteManager分离出AVAssetWriter，单独处理写数据，这样逻辑会清晰一点。 fileOut和writer的相同点和不同点从上面的两个流程大致可以看出来，相同点：数据采集都在AVCaptureSession中进行，视频和音频的输入都一样，画面的预览一致。不同点：输出不一致, AVCaptureMovieFileOutput 只需要一个输出即可，指定一个文件路后，视频和音频会写入到指定路径，不需要其他复杂的操作。AVAssetWriter 需要 AVCaptureVideoDataOutput 和 AVCaptureAudioDataOutput 两个单独的输出，拿到各自的输出数据后，然后自己进行相应的处理。 可配参数不一致，AVAssetWriter可以配置更多的参数。 视频剪裁不一致，AVCaptureMovieFileOutput 如果要剪裁视频，因为系统已经把数据写到文件中了，我们需要从文件中独到一个完整的视频，然后处理；而AVAssetWriter我们拿到的是数据流，还没有合成视频，对数据流进行处理，所以两则剪裁方式也是不一样。 其他添加背景音乐，水印等也是不一样的，这里没有涉及就不介绍了。到这里也差不多了，文章也有点长了。这些是我自己整理资料总结出来的，不排除会有一些错误之处，供大家学习参考，希望有所收获。如果方便，还请为我star一个，也算是对我的支持。 demo地址]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[instruments实践]]></title>
      <url>%2F2017%2F01%2F01%2Finstruments%E5%AE%9E%E8%B7%B5%2F</url>
      <content type="text"><![CDATA[前段时间写项目，突然跳到某一个页面crash了，然后我重新又进来几次，然后又没问题了，以为这是个”意外”，也没在意，一段时间后，又发生了一次crash，还是同一个页面，我意识到这不是偶然了，然后开始找原因。关于instruments的使用也看过很多次了，但是一直没怎么用，正好这次用它解决了一个问题，顺便记录一下。在猜测某个页面有问题的情况下，我一般的思路是这样的： 第一步：查看dealloc看这个页面有没有被释放，在dealloc打上断点，发现页面确实已经释放了，排除这个可能，进行下一步。 第二步：查看内存,cpu 我先后两次进入到这个页面，发现刚进入这个页面的瞬间内存飚的很高，然后瞬间又降下来，到这里问题已经变得明显了，这个页面确实存在问题，下面就需要深入的寻找问题所在。 第三步：Profile直接在上图的右上角点击 Profile in instruments,进入instruments后，我还是重复之前的操作，进入这个问题页面，还是发现了内存飙高的情况，然后我在下面的堆栈里找，发现怎么也找不到到底是哪个方法引起的。然后我发现上面的内存图上有条线可以拖动，然后我就把它拖到内存最高的地方，然后再去下面找，发现还是找不到。最后，我尝试在内存飙高的同时，点击左上角暂停运行，然后再下面的堆栈中继续找，这回终于找到了，是我自己的一个类渲染UI的时候导致的内存问题，找到具体的原因，解决起来也就轻松了。光看果然是没有用的，重要的还是要实践。 leak 右侧几个属性选项 Separate by Thread（建议选择） 按照线程分类查看哪些占用cpu最多Invert Call Tree（不建议选择）：调用树倒返过来，将习惯性的从根向下一级一级的显示，如选上就会返过来从最底层调用向一级一级的显示。如果想要查看那个方法调用为最深时使用会更方便些。Hidden System Librares (建议选择) 隐藏系统类库方法Flatten Recursion （一般不选）：选上它会将调用栈里递归函数作为一个入口。Hide Missing Symbols（建议选择）：隐藏丢失的符号，比如应用或者系统的dSYM文件找不到的话，在详情面板上是看不到方法名的，只能看一些读不明的十六进值，所以对我们来说是没有意义的，去掉了会使阅读更清楚些。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS数组防止越界crash]]></title>
      <url>%2F2016%2F12%2F24%2FiOS%E6%95%B0%E7%BB%84%E9%98%B2%E6%AD%A2%E8%B6%8A%E7%95%8Ccrash%2F</url>
      <content type="text"><![CDATA[有时候项目中总是出现一些无法预知的情况，导致数组越界是程序crash，如果这种意外情况无法避免，那么只能从侧面采取保护措施。我先从网上找答案，我想其他人也肯定遇到过相同的情况，如果有好的解决方案，直接采用就可以了。但是实际上，网上搜索的结果令人有些失望。下面还是记录一下我自己的解决方案，以及和网上解决方案的差异。 crash的具体几种情况 取值：index超出array的索引范围 添加：插入的object为nil或者Null 插入：index大于count、插入的object为nil或者Null 删除：index超出array的索引范围 替换：index超出array的索引范围、替换的object为nil或者Null 解决思路任何代码都需要围绕”高内聚，低耦合”的思想来实现，尤其是这种工具类的代码，更是应该对原代码入侵越少越好。一个很容易想到的方法，就是采用runtime, 把array中的以上几种情况的方法替换成自己的方法，然后再执行方法的时候加以判断。而我在网上搜到的结果全是以这种方案解决的，不排除有更好的方法我没找到。附上一个我找到的代码比较详细的demo。我试了一下，效果是可以达到，不过我还是毫不犹豫的拒绝这种方式。直接替换了系统的方法必然会导致更多无法预知的问题。这些问题，我在后面会讲几个我遇到的。而我准备这样解决： 这是系统原本的调用方式 这是改变之后的调用方式 我是先勾住array自带的方法，进行判断，如果没有越界等几种情况，再继续执行它自身的方法，相当于在执行方法前多了一步判断，而网上是直接把方法替换成自己的方法了，这里还是有本质的区别。 具体实现原理这里举例说明 NSArray 的 addObject: 方法，其他也类似。 先定义一个静态变量static IMP array_old_func_imap_object = NULL;这个变量用来记录array自带方法的指针地址 获取方法，然后记录方法的指针地址12Method old_func_imap_object = class_getInstanceMethod(NSClassFromString(@&quot;__NSArrayI&quot;), @selector(objectAtIndex:)); array_old_func_imap_object = method_getImplementation(old_func_imap_object); 改变原方法的指针地址，并指向自定义方法method_setImplementation(old_func_imap_object, [self methodForSelector:@selector(fm_objectAtIndex:)]); 自定义方法的实现1234567- (id)fm_objectAtIndex:(NSUInteger)index &#123; if (index &lt; [(NSArray*)self count]) &#123; return ((id(*)(id, SEL, NSUInteger))array_old_func_imap_object)(self, @selector(objectAtIndex:), index); &#125; NSLog(@&quot;NArray objectAtIndex 失败--%@&quot;, [NSThread callStackSymbols]); return nil;&#125; 最后一步到这里已经差不多完成了，就剩最后一个问题了，就是怎么运用到项目中，让这个工具类继承自NSObject，把这个工具类写成一个单例，然后在load方法中调用单例。load 方法会在本类第一次使用的时候调用一次，所以，把这个工具类拖到项目中，不用写其他代码，就实现了以上的功能。12345678910111213+ (void)load &#123; [FMDetecter sharedInstance];&#125;static dispatch_once_t onceToken;static FMDetecter *sharedInstance;+ (instancetype)sharedInstance &#123; dispatch_once(&amp;onceToken, ^&#123; sharedInstance = [[FMDetecter alloc] init]; &#125;); return sharedInstance;&#125; 这里有完整的代码，有兴趣可查看demo 实际出现的问题我用这两种方式都试了试，新建一个空项目，然后把上面几个方法都试一遍，似乎都没问题，然后我把他们公司的项目中，程序有时候卡死，还会crash，还是没法用，两种方式都有问题，找了找原因，发现NSArray和NSMutableArray的那几个方法，系统自己会调用很多很多次，极大的影响了性能，还有网友遇到了其他的问题：替换了objectAtIndex方法有输入的地方出来了软键盘按手机Home键就Crash了。简直无解，最后，还是决定写个分类，虽然low一点，毕竟还是能解决我的问题，并且不会带来新的问题。 这是给NSArray添加的方法1234567891011#import &quot;NSArray+beyond.h&quot;@implementation NSArray (beyond)-(id)objectAtIndexCheck:(NSUInteger)index&#123; if (index &lt; self.count) &#123; return [self objectAtIndex:index]; &#125; return nil;&#125;@end 这是给NSMutableArray添加的方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#import &quot;NSMutableArray+beyond.h&quot;@implementation NSMutableArray (beyond)-(id)objectAtIndexCheck:(NSUInteger)index&#123; if (index &lt; self.count) &#123; return [self objectAtIndex:index]; &#125; NSLog(@&quot;%@&quot;, [NSThread callStackSymbols]); return nil;&#125;- (void)addObjectCheck:(id)anObject&#123; if (anObject != nil &amp;&amp; [anObject isKindOfClass:[NSNull class]] == NO) &#123; [self addObject:anObject]; &#125; else &#123; NSLog(@&quot;%@&quot;, [NSThread callStackSymbols]); &#125;&#125;- (void)insertObjectCheck:(id)anObject atIndex:(NSUInteger)index&#123; if (index &lt;= self.count &amp;&amp; anObject != nil &amp;&amp; [anObject isKindOfClass:[NSNull class]] == NO) &#123; [self insertObject:anObject atIndex:index]; &#125; else &#123; NSLog(@&quot;%@&quot;, [NSThread callStackSymbols]); &#125;&#125;- (void)removeObjectAtIndexCheck:(NSUInteger)index&#123; if (index &lt; self.count) &#123; [self removeObjectAtIndex:index]; &#125; else &#123; NSLog(@&quot;%@&quot;, [NSThread callStackSymbols]); &#125;&#125;- (void)replaceObjectAtIndexCheck:(NSUInteger)index withObject:(id)anObject&#123; if (index &lt; self.count &amp;&amp; anObject != nil &amp;&amp; [anObject isKindOfClass:[NSNull class]] == NO) &#123; [self replaceObjectAtIndex:index withObject:anObject]; &#125; else &#123; NSLog(@&quot;%@&quot;, [NSThread callStackSymbols]); &#125;&#125;@end]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Swift小结]]></title>
      <url>%2F2016%2F11%2F29%2FSwift%E5%B0%8F%E7%BB%93%2F</url>
      <content type="text"><![CDATA[懒加载 格式 lazy var 变量: 类型 = { 创建变量代码 }() 以 lazy var 开头，闭包末尾跟一个’()’ 懒加载的写法本质上是定义并执行一个闭包 好处：没有解包的麻烦，并且 延迟创建 与OC懒加载的区别：这里的懒加载只会执行一次，如果中途被设置成nil，也不会再次执行懒加载完整的写法：eg:懒加载一个数组 123lazy var dataList: [String] = &#123; () -&gt; [String] in return [&quot;zero&quot;,&quot;one&quot;, &quot;two&quot;]&#125;() in 和 前面的代码块可以省略，写成这样 123lazy var dataList: [String] = &#123; return [&quot;zero&quot;,&quot;one&quot;, &quot;two&quot;]&#125;() 后面的闭包和括号也能省略,这种写法是最为简洁的懒加载形式，一般这样写就可以了 lazy var dataList: [String] = [&quot;zero&quot;,&quot;one&quot;, &quot;two&quot;] 比如懒加载一个label lazy var label: UILabel = UIlabel() 如果对label需要添加其他属性，就可以写成带（）的 123456lazy var label :UILabel = &#123; let label = UILabel() label.font = UIFont.systemFont(ofSize: 15) label.textColor = UIColor.red return label&#125;() extensionswift中一个类只有一个.m文件，所有代码都会写在.m中，代码多了，难免就会混乱，extension 就是用来隔离代码用的。extension最常用的几个地方： 代理方法12extension HomeViewController : UITableViewdelegate,UItableViewDataSource &#123;&#125; 对类的扩展12345678910111213141516171819202122import UIKit//对UIBarButtonItem UIbarButton 的一个扩展extension UIBarButtonItem &#123; // 便利构造函数 convenience init(imageName: String, highImageName: String, size: CGSize = CGSize.zero) &#123; let btn = UIButton(); btn.setImage(UIImage(named: imageName), for: UIControlState()) if(highImageName != &quot;&quot;) &#123; btn.setImage(UIImage(named: highImageName), for: .highlighted) &#125; if size == CGSize.zero &#123; btn.sizeToFit() &#125;else &#123; btn.frame = CGRect(origin: CGPoint.zero, size: size) &#125; self.init(customView: btn) &#125;&#125; 本类中的私有方法extension 外如果想调用extension 内的私有方法，需要加上fileprivate123456789// MARK: - 设置UI界面extension HomeController &#123; fileprivate func setupUI() &#123; setupNavgationbar() &#125; private func setupNavgationbar() &#123; self.navigationItem.leftBarButtonItem = UIBarButtonItem(imageName:&quot;logo&quot;) &#125; Swift宏定义Swift中没有宏的存在，但是有其他实现的方法。而且Swift共享整个命名空间，不在需要.pch文件。新建一个Swfit file文件，最好导入UIKit框架，没有参数的宏直接使用常量定义即可，有参数的宏使用函数代替 无参数的宏1234567891011//oc中的宏定义#define kIOS7 [UIDevice currentDevice].systemVersion.doubleValue&gt;=7.0 ? 1 :0#define kIOS8 [UIDevice currentDevice].systemVersion.doubleValue&gt;=8.0 ? 1 :0#define kScreenHeight [UIScreen mainScreen].bounds.size.height#define kScreenWidth [UIScreen mainScreen].bounds.size.width//转换成Swift的写法let kIOS7 = Double(UIDevice().systemVersion)&gt;=7.0 ? 1 :0let kIOS8 = Double(UIDevice().systemVersion)&gt;=8.0 ? 1 :0let kScreenHeight = UIScreen.mainScreen().bounds.size.heightlet kScreenWidth = UIScreen.mainScreen().bounds.size.width 有参数的宏1234567//oc写法#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1]//Swift中的写法func RGBCOLOR(r:CGFloat,_ g:CGFloat,_ b:CGFloat) -&gt; UIColor&#123; return UIColor(red: (r)/255.0, green: (g)/255.0, blue: (b)/255.0, alpha: 1.0)&#125; Swift中weakSelf 的 写法第一种 类似OC的写法这里只能用 var 修饰1234weak var weakSelf = selfloadData &#123; (result) in print(weakSelf?.view)&#125; 第二种 Swift推荐的方式123loadData &#123; [weak self] (result) in print(self?.view)&#125; 第三种 不推荐使用[unowned self] 表示{} 中的 所有self 都是 assgined， 不会强引用，但是对象释放，指针地址不会变化12345//相当于 OC __unsafe_unretain // 如果对象被释放，继续调用，就会出现野指针,有极大的安全隐患loadData &#123; [unowned self] (result) in print(self.view) &#125; 单例Swift中单例写法较为简单，并且线程安全123456static let shared: XCRequest = &#123; // 实例化对象 let instance = XCRequest() // 返回对象 return instance &#125;() 还有另外一种写法123456static let instance: XCRequest = XCRequest() class func shareManager() -&gt;XCRequest &#123; return instance &#125; getter&amp;setter模仿OC的写法，事实上Swift不会这么写1234567891011121314151617181920212223var _name: String?var name: String? &#123; get &#123; return _name &#125; set &#123; _name = newValue &#125;&#125; var age:Int&#123; // 如果只重写了get,没有set. 那么属性是一个&quot;计算型&quot;属性 // 计算型属性不占用存储空间, 相当于OC中的readOnly get&#123; return 30 &#125; &#125; // 如果只有get可以简写为 var gender:String&#123; return &quot;lnj&quot; &#125; 计算型属性只有getter，没有setter的属性被称为计算型属性12345var title: String &#123; get &#123; return &quot;Mr &quot; + (name ?? &quot;&quot;) &#125; &#125; 只实现 getter 方法的属性被称为计算型属性，等同于 OC 中的 ReadOnly 属性 计算型属性本身不占用内存空间 不可以给计算型属性设置数值 计算型属性可以使用以下代码简写:123var title: String &#123; return &quot;Mr &quot; + (name ?? &quot;&quot;) &#125; didSetOC中最常见的就是重写setter方法，然后同时做一些额外的事情，那么Swift中就用didSet来实现 12345678var room_list : [[String : NSObject]]? &#123; didSet &#123; guard let room_list = room_list else &#123; return &#125; for dict in room_list &#123; anchors.append(AnchorModel(dict: dict)) &#125; &#125; &#125; 构造函数，析构函数先了解两个概念 方法重载：• 函数名相同，参数名／参数类型／参数个数不同 • 重载函数并不仅仅局限于构造函数 • 函数重载是面相对象程序设计语言的重要标志 • OC 不支持函数重载，OC 的替代方式是 withXXX… 方法重写：• 也叫覆盖，指在子类中定义一个与父类中方法同名同参数列表的方法。 • 重写父类方法需要加override • 重写是子类的方法覆盖父类的方法，要求方法名和参数都相同 • 因为子类会继承父类的方法，而重写就是将从父类继承过来的方法重新定义一次，重新填写方法中的代码。 • 重写必须继承，重载不用 构造函数1234567891011121314151617181920212223class Person: NSObject &#123; var name: String ///最简单的必选属性的构造函数 ///构造函数的目的，给自己分配空间并设置初始值 ///属性的初始化放在super.init前面 /// 重写父类方法需要加override override init () &#123; name = &quot;default name:Tom&quot; super.init() &#125; /// 如果实现了 构造函数的重载，并且没有重写构造函数，那么系统不再提供原始的init()函数 /// 方法重载（类似OC自定义初始化方法） init(name: String) &#123; self.name = name super.init() &#125; &#125; 析构函数相当于OC中的dealloc方法123deinit &#123; print(&quot;被释放了&quot;)&#125; guard let &amp; if let相当于OC中用if来判断某个值是不是为空我认为这个语法最大的好处是避免了写大量的 ？！，用来判断的这个属性必须是可选的guard 与 if 的区别是 guard只有在条件不满足的时候才会执行这段代码123guard let _:String = pe.name else &#123; return&#125; 如果要判断多个参数,一直在后面加123guard let _ = pe.name, let _ = pe.title else &#123; return&#125; if let 可以在条件成立或者不成立的情况下，在{}中分别处理12345if let name = pe.name &#123; print(name) &#125; else &#123; return&#125; asas 的三种情况 as？1. 前面的返回值是可选的 2. guard let / if let 一定用 as? as!1. 前面的返回值一定有值 as1. NSString -&gt; String 2. NSArray -&gt;[ ] 3. NSDictionary -&gt; [ ] 4. 这种情况是因为底层做了结构体和OC对象的桥接 try 处理错误异常12345678910111213141516let jsonSTring = &quot;&#123;\&quot;name\&quot;: \&quot;zhang\&quot;]&quot;let data = jsonSTring.data(using: .utf8)//方法1. 推荐，如果解析成功就有值，否则 为nillet json1 = try? JSONSerialization.jsonObject(with: data!, options: [])print(json1 ?? &quot;json1 为 nil&quot;)//方法2. 墙裂不推荐 如果解析成功就有值，否则crash//let json2 = try! JSONSerialization.jsonObject(with: data!, options: [])//方法3. 异常处理,能够接受错误，可以在错误的情况下另行处理do &#123; let json3 = try JSONSerialization.jsonObject(with: data!, options: []) print(json3)&#125; catch &#123; print(error);&#125; 网络请求GET1234567891011121314151617181920212223242526func getWithPath(path: String,param: Dictionary&lt;String,Any&gt;?,completion: @escaping ((_ result: Any?, _ success:Bool) -&gt; ())) &#123; let url = URL(string: path.addingPercentEncoding(withAllowedCharacters: CharacterSet.urlQueryAllowed)!) if let para = param &#123; //对参数进行处理 print(para) &#125; else &#123; &#125; let session = URLSession.shared let dataTask = session.dataTask(with: url!) &#123; (data, respond, error) in if let data = data &#123; if let result = try? JSONSerialization.jsonObject(with: data, options: .allowFragments)&#123; completion(result,true) &#125; &#125;else &#123; completion(error,false) &#125; &#125; dataTask.resume() &#125; POST1234567891011121314151617181920212223func postWithPath(path: String,paras: Dictionary&lt;String,Any&gt;?,success: @escaping ((_ result: Any) -&gt; ()),failure: @escaping ((_ error: Error) -&gt; ())) &#123; let url = URL(string: path) var request = URLRequest.init(url: url!) request.httpMethod = &quot;POST&quot; print(path) request.httpBody = path.data(using: .utf8) let session = URLSession.shared let dataTask = session.dataTask(with: request) &#123; (data, respond, error) in if let data = data &#123; if let result = try? JSONSerialization.jsonObject(with: data, options: .allowFragments) &#123; success(result) &#125; &#125;else &#123; failure(error!) &#125; &#125; dataTask.resume() &#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[swift自动布局]]></title>
      <url>%2F2016%2F11%2F24%2Fswift%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%2F</url>
      <content type="text"><![CDATA[苹果原生自动布局 自动布局核心公式 view1.attr1 = view2.attr2 * multiplier + constant 自动布局构造函数 12345678NSLayoutConstraint(item: 视图, attribute: 约束属性， relatedBy: 约束关系， toItem: 参照视图, attribute: 参照属性, multiplier:乘积, constant:约束数值) 如果指定 宽 高 约束 参照视图设置为 nil 参照属性选择 .notAnAttribute 自动布局类函数 12345NSLayoutConstraint.constraints(withVisualFormat: VLF公式, options:[], metrics: 约束数值字典[String : 数值], views: 视图字典[String : 子视图] ) VFL 可视化格式化语言 H 水平方向 V 垂直方向 | 边界 [] 包含控件的名称字符串，对应关系在views字典中定义 () 定义控件的宽/高，可以在metrics中指定 tip：VFL 通常用于连续参照关系，如果遇到居中对齐，通常使用直接参照]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[自定义刷新控件]]></title>
      <url>%2F2016%2F11%2F16%2F%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%B7%E6%96%B0%E6%8E%A7%E4%BB%B6%2F</url>
      <content type="text"><![CDATA[一：前言记得工作中第一次用的刷新控件是svpulltorefresh，用法稍微有点麻烦，而且bug颇多，后来果断放弃，现在用的是MJRefresh,不管是用法还是bug，都比前一个好多了，但是不久前也遇到了一个致命的bug，有好些情况下会导致MJRefresh陷入一个死循环，导致不断的刷新，只能重启软件才行。MJRefresh工程比较庞大，找到了bug也很难修改，然后还是决定自己写一个，系统提供的UIRefreshControl我认为是最好的，缺点是不提供自定义UI的方法，那么我就自己基于它来自定义UI。我不是一开始就决定继承于UIRefreshControl，我同时也写了一个继承与UIView的control，两个进行对比，发现使用UIview会有很多弊端，这种弊端在一些复杂特殊的情况下一下子就暴露出来了，而且很难解决，当然，正常状态下是没什么问题的，有兴趣的同学倒是可以去试一试。本demo供大家学习和参考，如有发现bug，还请issues 我。 二: 了解 UIRefreshControl 基本使用方法 123456//初始化一个controlUIRefreshControl *control = [[UIRefreshControl alloc] init];//给control 添加一个刷新方法[control addTarget:self action:@selector(refreshAction) forControlEvents:UIControlEventValueChanged];//把control 添加到 tableView[self.tableView addSubview:control]; 存在的问题 刷新时的动画是一个灰色小菊花，很多情况下不符合app的刷新动画效果 经过多次反复测试，下拉的偏移量达到130以上才会触发刷新方法，很显然这个也不符合，一般的刷新控件的高度60左右，所以下拉的偏移量达到60就可以触发刷新的方法了。 自定义控件的思路 去掉默认的动画效果 自定义自己的动画效果 改变满足刷新时的条件 三：FMRefreshControl 先看一下我写完的这个控件的使用方法 123FMRefreshControl *control = [[FMRefreshControl alloc] initWithTargrt:self refreshAction:@selector(refreshAction)];[self.tableView addSubview:control]; 两行代码，用法比系统的还要稍微简单一点。 再看一下效果 四：思路与代码1. 关于 UIRefreshControl 的几个注意点，通过frame无法修改它的高度，修改高度目前只找到一种方法，先添加到 superViwe,再执行[[_control.subviews objectAtIndex:0] setFrame:CGRectMake(0, 0, _control.bounds.size.width, 30)];一开始我是想改变它的高度是否就能改变它的触发刷新的偏移量，然后我找到了这个方法可以修改它的高度，但实际上改变了高度还是无法改变触发下拉刷新的偏移量，所以我们需要自定义去触发刷新这个动作的时机。 2.手动去触发刷新动作也有几个注意点，我们是根据偏移量去触发刷新，但是仅仅靠这一个动作是不够的，还需要一个条件，那就是用户手指响应过屏幕，简单地说，先定义一个变量，如果用户触摸过屏幕，就把变量置为YES，然后再判断用户手指离开时是否达到了触发刷新的偏移量，如果两个条件都满足，就触发刷新，刷新完把变量置为NO，如果不满足，就不触发，也把变量置为NO。这样就避免了UIScrollow 因偏移量变动而导致非人为的刷新。3. 进入代码阶段12FMRefreshControl *control = [[FMRefreshControl alloc] initWithTargrt:self refreshAction:@selector(refreshAction)];[self.tableView addSubview:control]; 初始化的时候赋一个 target 和 一个 action，当满足条件的时候，我们需要知道让谁去执行刷新方法，有这两个参数足够，当执行到第二行 addSubView的时候，我们需要在control内部实现这个方法：123456789- (void)willMoveToSuperview:(UIView *)newSuperview &#123; [super willMoveToSuperview:newSuperview]; if ([newSuperview isKindOfClass:[UIScrollView class]]) &#123; self.superScrollView = (UIScrollView *)newSuperview; [self.superScrollView addObserver:self forKeyPath:@&quot;contentOffset&quot; options:NSKeyValueObservingOptionNew context:nil]; &#125;&#125; 这样，我们就知道当前这个control被添加到哪个父视图上了，为了安全及代码的严谨，先判断父视图是否属于UIScrollView，如果是，就用KVO监听contentOffset属性，这样便能知道用户滑动的偏移量。 这里我定义了3种状态：12345typedef NS_ENUM(NSInteger, FMRefreshState) &#123; FMRefreshStateNormal = 0, /** 普通状态 */ FMRefreshStatePulling, /** 释放刷新状态 */ FMRefreshStateRefreshing, /** 正在刷新 */&#125;; 以及切换状态后UI的切换和方法的触发：123456789101112131415161718192021222324252627282930313233- (void)setCurrentStatus:(FMRefreshState)currentStatus &#123; _currentStatus = currentStatus; switch (_currentStatus) &#123; case FMRefreshStateNormal: NSLog(@&quot;切换到Normal&quot;); [self.imageView stopAnimating]; self.label.text = FM_Refresh_normal_title; [self.label sizeToFit]; self.imageView.image = [UIImage imageNamed:@&quot;refresh_1&quot;]; break; case FMRefreshStatePulling: NSLog(@&quot;切换到Pulling&quot;); self.label.text = FM_Refresh_pulling_title; [self.label sizeToFit]; self.imageView.animationImages = self.refreshingImages; self.imageView.animationDuration = 1.5; [self.imageView startAnimating]; break; case FMRefreshStateRefreshing: NSLog(@&quot;切换到Refreshing&quot;); self.label.text = FM_Refresh_Refreshing_title; [self.label sizeToFit]; [self beginRefreshing]; self.imageView.animationImages = self.refreshingImages; self.imageView.animationDuration = 1.5; [self.imageView startAnimating]; [self doRefreshAction]; break; &#125;&#125; 切换到FMRefreshStateNormal 停止动画，切换到FMRefreshStatePulling 开始动画，达到这个状态，说明用户已经达到了刷新的偏移量，此时松手便可刷新，切换到FMRefreshStateRefreshing，如果此时往回滑动，小于临界值，那么状态重新切回FMRefreshStateNormal。满足刷新条件，则便可执行以下方法：123456789- (void)doRefreshAction&#123;#pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot; if (self.refreshTarget &amp;&amp; [self.refreshTarget respondsToSelector:self.refreshAction]) [self.refreshTarget performSelector:self.refreshAction];#pragma clang diagnostic pop &#125; 下面看最关键的KVO方法，也是这里面最复杂的逻辑处理代码：123456789101112131415161718192021222324252627282930- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context &#123; //isDragging 属性是指用户手指是否在拖动 if (self.superScrollView.isDragging &amp;&amp; !self.isRefreshing) &#123; if (!self.originalOffsetY) &#123; self.originalOffsetY = -self.superScrollView.contentInset.top; &#125; CGFloat normalPullingOffset = self.originalOffsetY - k_FMRefresh_Height; if (self.currentStatus == FMRefreshStatePulling &amp;&amp; self.superScrollView.contentOffset.y &gt; normalPullingOffset) &#123; self.currentStatus = FMRefreshStateNormal; &#125; else if (self.currentStatus == FMRefreshStateNormal &amp;&amp; self.superScrollView.contentOffset.y &lt; normalPullingOffset) &#123; self.currentStatus = FMRefreshStatePulling; &#125; &#125; else if(!self.superScrollView.isDragging)&#123; if (self.currentStatus == FMRefreshStatePulling) &#123; self.currentStatus = FMRefreshStateRefreshing; &#125; &#125; //拖动的偏移量，转换成正数 CGFloat pullDistance = -self.frame.origin.y; self.backgroundView.frame = CGRectMake(0, 0, k_FMRefresh_Width, pullDistance); CGFloat totalWidth = 35 + 20 + self.label.bounds.size.width; CGFloat imageViewX = (k_FMRefresh_Width - totalWidth)/2; self.imageView.frame = CGRectMake(imageViewX, -k_FMRefresh_Height+pullDistance+(k_FMRefresh_Height - self.imageView.bounds.size.height)/2, self.imageView.frame.size.width, self.imageView.frame.size.height); self.label.frame = CGRectMake(imageViewX + 35 + 20, -k_FMRefresh_Height + pullDistance + (k_FMRefresh_Height - self.label.bounds.size.height)/2, self.label.frame.size.width, self.label.frame.size.height); &#125; 这里最重要的就是处理两点：1. 根据偏移量和用户手指的拖动来切换状态，2. control上面的子视图需要我们根据偏移量来实时更新。 还有一种情况，上面也提到过，用户先滑动到FMRefreshStatePulling状态，然后又往回滑动，此时的偏移量在0-FMRefreshStatePulling状态的偏移量之间，此时调用自身的 endRefreshing偏移量不会复原，还需要我们自己处理，看了几个老外写的自定义刷新控件，他们都没修复这个bug。他们也没封装，全部代码写在了控制器里，什么都没有改变，只是实现了一个动画效果，还多了个bug,动画效果倒是不错的。有兴趣的可以参考一番：https://www.jackrabbitmobile.com/app-development/ios-custom-pull-to-refresh-contro/https://possiblemobile.com/2014/05/ios-custom-pull-to-refresh/ 1234567891011121314151617- (void)endRefreshing &#123; if (self.currentStatus != FMRefreshStateRefreshing) &#123; return; &#125; self.currentStatus = FMRefreshStateNormal; [super endRefreshing]; //在执行刷新的状态中，用户手动拖动到 nornal 状态的 offset，[super endRefreshing] 无法回到初始位置，所以手动设置 dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123; if(self.superScrollView.contentOffset.y &gt;= self.originalOffsetY - k_FMRefresh_Height &amp;&amp; self.superScrollView.contentOffset.y &lt;= self.originalOffsetY) &#123; CGPoint offset = self.superScrollView.contentOffset; offset.y = self.originalOffsetY; [self.superScrollView setContentOffset:offset animated:YES]; &#125; &#125;);&#125; 最后还有一点不要忘记 dealloc移除监听：123- (void)dealloc &#123; [self.superScrollView removeObserver:self forKeyPath:@&quot;contentOffset&quot;];&#125; 整篇文章从上至下是按照整个完整的思路写下来的，先是提出遇到的问题以及难点，然后最后的代码和思路也是由外至内一路写下来，希望方便大家阅读。这是上篇，下拉刷新的，还有下篇，上拉加载，过两天写，demo中已经有了，不过就是还没优化。 domo地址：https://github.com/suifengqjn/FMRefreshControl]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS语音识别]]></title>
      <url>%2F2016%2F11%2F16%2FIOS10%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[公司项目需要实现语音搜索，正好记录一下这个iOS10新出的API。 iOS10是一个变化比价大的版本，开放了很多接口，这样也更方便开发者自定义各种功能。本文主要讲解一下新增的Speech框架，有了这个框架，我们想要为自己的app增加语音识别功能，不要依赖第三方的服务，几十行代码就可以轻松搞定。demo地址在文章末尾。 一：基本配置 Xcode8，iOS10系统真机 导入头文件：OC #import&lt;Speech/Speech.h&gt; swift import Speech 配置info.plist文件:配置两个权限，语音识别和麦克风 12345&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt; &lt;string&gt;Your microphone will be used to record your speech when you press the &quot;Start Recording&quot; button.&lt;/string&gt; &lt;key&gt;NSSpeechRecognitionUsageDescription&lt;/key&gt; &lt;string&gt;Speech recognition will be used to determine which words you speak into this device&apos;s microphone.&lt;/string&gt; 二：用到的几个类AVAudioEngine 语音引擎，负责提供语音输入SFSpeechAudioBufferRecognitionRequest 处理语音识别请求SFSpeechRecognizer 语音识别器SFSpeechRecognitionTask 输出语音识别对象的结果NSLocale 语言类型语音识别一共就用到了这几个类，整体的流程也容易理解，语音识别器通过语音引擎，处理语音识别请求，把结果交给SFSpeechRecognitionTask处理，最后输出文字。SFSpeechRecognizer 自身有几个代理方法，实际上，如果只是将语音转化成文字，是不需要这几个代理方法的。12345678910111213141516171819202122232425262728293031//当开始检测音频源中的语音时首先调用此方法-(void)speechRecognitionDidDetectSpeech:(SFSpeechRecognitionTask *)task&#123; &#125;//当识别出一条可用的信息后 会调用/*需要注意，apple的语音识别服务会根据提供的音频源识别出多个可能的结果 每有一条结果可用 都会调用此方法 */-(void)speechRecognitionTask:(SFSpeechRecognitionTask *)task didHypothesizeTranscription:(SFTranscription *)transcription&#123; &#125;//当识别完成所有可用的结果后调用- (void)speechRecognitionTask:(SFSpeechRecognitionTask *)task didFinishRecognition:(SFSpeechRecognitionResult *)recognitionResult&#123; &#125;//当不再接受音频输入时调用 即开始处理语音识别任务时调用- (void)speechRecognitionTaskFinishedReadingAudio:(SFSpeechRecognitionTask *)task&#123; &#125;//当语音识别任务被取消时调用- (void)speechRecognitionTaskWasCancelled:(SFSpeechRecognitionTask *)task&#123; &#125;//语音识别任务完成时被调用- (void)speechRecognitionTask:(SFSpeechRecognitionTask *)task didFinishSuccessfully:(BOOL)successfully&#123;&#125; 三：重点代码有两点需要注意： 语音识别会很耗电以及会使用很多数据 语音识别一次只持续大概一分钟的时间 我先定义了这几个属性 12345@property (nonatomic, strong) AVAudioEngine *audioEngine;@property (nonatomic, strong) SFSpeechRecognizer *speechRecognizer;@property (nonatomic, strong) SFSpeechAudioBufferRecognitionRequest *recognitionRequest;@property (nonatomic, strong) SFSpeechRecognitionTask *recognitionTask;@property (nonatomic, strong) NSLocale *locale; 语音权限的判断 1234567891011121314151617181920212223242526272829[SFSpeechRecognizer requestAuthorization:^(SFSpeechRecognizerAuthorizationStatus status) &#123; BOOL isAuthorized = NO; switch (status) &#123; //结果未知 用户尚未进行选择 case SFSpeechRecognizerAuthorizationStatusNotDetermined: isAuthorized = NO; break; //用户拒绝授权语音识别 case SFSpeechRecognizerAuthorizationStatusDenied: isAuthorized = NO; break; //设备不支持语音识别功能 case SFSpeechRecognizerAuthorizationStatusRestricted: isAuthorized = NO; break; //用户授权语音识别 case SFSpeechRecognizerAuthorizationStatusAuthorized: isAuthorized = YES; break; default: break; &#125; if (callback) &#123; callback(isAuthorized, status); &#125; &#125;]; 将语音引擎得到的语音数据添加到语音识别的请求中，这个过程也就是开始录音后的流程 1234AVAudioFormat *recordingFormat = [[self.audioEngine inputNode] outputFormatForBus:0]; [[self.audioEngine inputNode] installTapOnBus:0 bufferSize:1024 format:recordingFormat block:^(AVAudioPCMBuffer * _Nonnull buffer, AVAudioTime * _Nonnull when) &#123; [self.recognitionRequest appendAudioPCMBuffer:buffer]; &#125;]; SFSpeechRecognitionTask 把上一过程中得到的语音请求转化成文字，这个过程是试试进行的。 123456789101112131415self.recognitionTask = [self.speechRecognizer recognitionTaskWithRequest:self.recognitionRequest resultHandler:^(SFSpeechRecognitionResult * _Nullable result, NSError * _Nullable error) &#123; BOOL isFinal = NO; NSString *bestResult = [[result bestTranscription] formattedString]; isFinal = result.isFinal; if (error || isFinal) &#123; [self endTask]; if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(recognizeFail:)]) &#123; [self.delegate recognizeFail:error]; &#125; &#125; else &#123; if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(recognizeSuccess:)]) &#123; [self.delegate recognizeSuccess:bestResult]; &#125; &#125; &#125;]; 四：提取录音文件中的文字 也需要先获取用户的授权，授权代码与上面一致。 对文件的处理相对较为简单12345678910111213141516//初始化一个识别器SFSpeechRecognizer *recognizer = [[SFSpeechRecognizer alloc] initWithLocale:[NSLocale localeWithLocaleIdentifier:@&quot;zh_CN&quot;]];//初始化mp3的urlNSURL *url = [[NSBundle mainBundle] URLForResource:@&quot;test.mp3&quot; withExtension:nil];//初始化一个识别的请求SFSpeechURLRecognitionRequest *request = [[SFSpeechURLRecognitionRequest alloc] initWithURL:url];//发起请求[recognizer recognitionTaskWithRequest:request resultHandler:^(SFSpeechRecognitionResult * _Nullable result, NSError * _Nullable error) &#123; if(error != nil) &#123; NSLog(@&quot;识别错误:%@&quot;,error); &#125; NSString *resultString = result.bestTranscription.formattedString; NSLog(@&quot;%@&quot;,resultString); &#125;]; github地址：https://github.com/suifengqjn/IOS10Speech]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[runtime详解]]></title>
      <url>%2F2016%2F04%2F16%2Fruntime%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[公司项目用到一个三方开源库，里面有个bug，不能改动源码，我想来想去，只能通过runtime这个万能的手段来解决。但是runtime 并不怎么会用，怎么办，马上学习呗。说到runtime，它是Objective-c里面最核心的技术，被人们传呼的神乎其神，但是感觉有一层神秘的面纱笼罩其上，毕竟使用场景不多，相信大多数开发者都不会熟练的运用。而网络上也有无数的文章来讲解runtime，但是真的非常的乱，非常的碎片化，很少有讲解的比较全面的。 最初是在onevcat的博客上看到runtime的runtime的博客，说句实话，看完后我还是蒙的，这里面主要讲了一下runtime 比较核心的功能-Method Swizzling，不过看完后还是有些不知如何下手的感觉。下面是我自己对runtime的整理，从零开始，由浅入深，并且带了几个runtime实际的应用场景。看完之后，你可以再回过头来看喵神的这篇文章，应该就能看的懂了。 一：基本概念Runtime基本是用C和汇编写的，可见苹果为了动态系统的高效而作出的努力。你可以在这里下到苹果维护的开源代码。苹果和GNU各自维护一个开源的runtime版本，这两个版本之间都在努力的保持一致。Objective-C 从三种不同的层级上与 Runtime 系统进行交互，分别是通过 Objective-C 源代码，通过 Foundation 框架的NSObject类定义的方法，通过对 runtime 函数的直接调用。大部分情况下你就只管写你的Objc代码就行，runtime 系统自动在幕后辛勤劳作着。 RunTime简称运行时,就是系统在运行的时候的一些机制，其中最主要的是消息机制。 对于C语言，函数的调用在编译的时候会决定调用哪个函数，编译完成之后直接顺序执行，无任何二义性。 OC的函数调用成为消息发送。属于动态调用过程。在编译的时候并不能决定真正调用哪个函数（事实证明，在编 译阶段，OC可以调用任何函数，即使这个函数并未实现，只要申明过就不会报错。而C语言在编译阶段就会报错）。 只有在真正运行的时候才会根据函数的名称找 到对应的函数来调用。 二：runtime的具体实现我们写的oc代码，它在运行的时候也是转换成了runtime方式运行的，更好的理解runtime，也能帮我们更深的掌握oc语言。每一个oc的方法，底层必然有一个与之对应的runtime方法。 当我们用OC写下这样一段代码[tableView cellForRowAtIndexPath:indexPath]; 在编译时RunTime会将上述代码转化成[发送消息]objc_msgSend(tableView, @selector(cellForRowAtIndexPath:),indexPath); 三:常见方法 unsigned int count; 获取属性列表 12345objc_property_t *propertyList = class_copyPropertyList([self class], &amp;count); for (unsigned int i=0; i&lt;count; i++) &#123; const char *propertyName = property_getName(propertyList[i]); NSLog(@&quot;property----&gt;%@&quot;, [NSString stringWithUTF8String:propertyName]); &#125; 获取方法列表 12345Method *methodList = class_copyMethodList([self class], &amp;count);for (unsigned int i; i&lt;count; i++) &#123; Method method = methodList[i]; NSLog(@&quot;method----&gt;%@&quot;, NSStringFromSelector(method_getName(method)));&#125; 获取成员变量列表 123456Ivar *ivarList = class_copyIvarList([self class], &amp;count); for (unsigned int i; i&lt;count; i++) &#123; Ivar myIvar = ivarList[i]; const char *ivarName = ivar_getName(myIvar); NSLog(@&quot;Ivar----&gt;%@&quot;, [NSString stringWithUTF8String:ivarName]); &#125; 获取协议列表 1234567891011 __unsafe_unretained Protocol **protocolList = class_copyProtocolList([self class], &amp;count); for (unsigned int i; i&lt;count; i++) &#123; Protocol *myProtocal = protocolList[i]; const char *protocolName = protocol_getName(myProtocal); NSLog(@&quot;protocol----&gt;%@&quot;, [NSString stringWithUTF8String:protocolName]); &#125; ``` &gt;现在有一个Person类，和person创建的xiaoming对象,有test1和test2两个方法- 获得类方法 Class PersonClass = object_getClass([Person class]);SEL oriSEL = @selector(test1);Method oriMethod = class_getInstanceMethod(xiaomingClass, oriSEL);12- 获得实例方法 Class PersonClass = object_getClass([xiaoming class]);SEL oriSEL = @selector(test2);Method cusMethod = class_getInstanceMethod(xiaomingClass, oriSEL);1- 添加方法 BOOL addSucc = class_addMethod(xiaomingClass, oriSEL, method_getImplementation(cusMethod), method_getTypeEncoding(cusMethod));12- 替换原方法实现 class_replaceMethod(toolClass, cusSEL, method_getImplementation(oriMethod), method_getTypeEncoding(oriMethod));1- 交换两个方法 method_exchangeImplementations(oriMethod, cusMethod);12345678910111213141516171819202122232425262728293031 ### 四：常见作用- 动态的添加对象的成员变量和方法- 动态交换两个方法的实现- 拦截并替换方法- 在方法上增加额外功能- 实现NSCoding的自动归档和解档- 实现字典转模型的自动转换### 五：代码实现要使用runtime，要先引入头文件`#import &lt;objc/runtime.h&gt;`这些代码的实例有浅入深逐步讲解，最后附上一个我在公司项目中遇到的一个实际问题。#### 1. 动态变量控制 在程序中，xiaoming的age是10，后来被runtime变成了20，来看看runtime是怎么做到的。 ##### 1.动态获取XiaoMing类中的所有属性[当然包括私有] `Ivar *ivar = class_copyIvarList([self.xiaoming class], &amp;count);` ##### 2.遍历属性找到对应name字段 `const char *varName = ivar_getName(var);`##### 3.修改对应的字段值成20 `object_setIvar(self.xiaoMing, var, @&quot;20&quot;);` ##### 4.代码参考 -(void)answer{ unsigned int count = 0; Ivar ivar = class_copyIvarList([self.xiaoMing class], &amp;count); for (int i = 0; i&lt;count; i++) { Ivar var = ivar[i]; const char varName = ivar_getName(var); NSString *name = [NSString stringWithUTF8String:varName]; if ([name isEqualToString:@”_age”]) { object_setIvar(self.xiaoMing, var, @”20”); break; } } NSLog(@”XiaoMing’s age is %@”,self.xiaoMing.age); }123456#### 2.动态添加方法在程序当中，假设XiaoMing的中没有`guess`这个方法，后来被Runtime添加一个名字叫guess的方法，最终再调用guess方法做出相应。那么，Runtime是如何做到的呢？ ##### 1.动态给XiaoMing类中添加guess方法： class_addMethod([self.xiaoMing class], @selector(guess), (IMP)guessAnswer, &quot;v@:&quot;); 12345678910111213141516171819202122232425262728293031323334353637383940414243这里参数地方说明一下：&gt;(IMP)guessAnswer 意思是guessAnswer的地址指针;&gt;&quot;v@:&quot; 意思是，v代表无返回值void，如果是i则代表int；@代表 id sel; : 代表 SEL _cmd;&gt;“v@:@@” 意思是，两个参数的没有返回值。 ##### 2.调用guess方法响应事件： [self.xiaoMing performSelector:@selector(guess)];##### 3.编写guessAnswer的实现： void guessAnswer(id self,SEL _cmd)&#123; NSLog(@&quot;i am from beijing&quot;); &#125; 这个有两个地方留意一下：* void的前面没有+、-号，因为只是C的代码。* 必须有两个指定参数(id self,SEL _cmd) ##### 4.代码参考``` -(void)answer&#123; class_addMethod([self.xiaoMing class], @selector(guess), (IMP)guessAnswer, &quot;v@:&quot;); if ([self.xiaoMing respondsToSelector:@selector(guess)]) &#123; [self.xiaoMing performSelector:@selector(guess)]; &#125; else&#123; NSLog(@&quot;Sorry,I don&apos;t know&quot;); &#125; &#125; void guessAnswer(id self,SEL _cmd)&#123; NSLog(@&quot;i am from beijing&quot;); &#125; 3：动态交换两个方法的实现在程序当中，假设XiaoMing的中有test1 和 test2这两个方法，后来被Runtime交换方法后，每次调动test1 的时候就会去执行test2，调动test2 的时候就会去执行test1， 。那么，Runtime是如何做到的呢？ 1. 获取这个类中的两个方法并交换123Method m1 = class_getInstanceMethod([self.xiaoMing class], @selector(test1)); Method m2 = class_getInstanceMethod([self.xiaoMing class], @selector(test2)); method_exchangeImplementations(m1, m2); 交换方法之后，以后每次调用这两个方法都会交换方法的实现 4：拦截并替换方法在程序当中，假设XiaoMing的中有test1这个方法，但是由于某种原因，我们要改变这个方法的实现，但是又不能去动它的源代码(正如一些开源库出现问题的时候)，这个时候runtime就派上用场了。 我们先增加一个tool类，然后写一个我们自己实现的方法-change，通过runtime把test1替换成change。 123456789101112131415161718192021222324Class PersionClass = object_getClass([Person class]);Class toolClass = object_getClass([tool class]); ////源方法的SEL和Method SEL oriSEL = @selector(test1); Method oriMethod = class_getInstanceMethod(PersionClass, oriSEL); ////交换方法的SEL和Method SEL cusSEL = @selector(change); Method cusMethod = class_getInstanceMethod(toolClass, cusSEL); ////先尝试給源方法添加实现，这里是为了避免源方法没有实现的情况 BOOL addSucc = class_addMethod(PersionClass, oriSEL, method_getImplementation(cusMethod), method_getTypeEncoding(cusMethod)); if (addSucc) &#123; // 添加成功：将源方法的实现替换到交换方法的实现 class_replaceMethod(toolClass, cusSEL, method_getImplementation(oriMethod), method_getTypeEncoding(oriMethod)); &#125;else &#123; //添加失败：说明源方法已经有实现，直接将两个方法的实现交换即method_exchangeImplementations(oriMethod, cusMethod); &#125; 5：在方法上增加额外功能有这样一个场景，出于某些需求，我们需要跟踪记录APP中按钮的点击次数和频率等数据，怎么解决？当然通过继承按钮类或者通过类别实现是一个办法，但是带来其他问题比如别人不一定会去实例化你写的子类，或者其他类别也实现了点击方法导致不确定会调用哪一个，runtime可以这样解决： 12345678910111213141516171819202122232425262728293031@implementation UIButton (Hook)+ (void)load &#123; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; Class selfClass = [self class]; SEL oriSEL = @selector(sendAction:to:forEvent:); Method oriMethod = class_getInstanceMethod(selfClass, oriSEL); SEL cusSEL = @selector(mySendAction:to:forEvent:); Method cusMethod = class_getInstanceMethod(selfClass, cusSEL); BOOL addSucc = class_addMethod(selfClass, oriSEL, method_getImplementation(cusMethod), method_getTypeEncoding(cusMethod)); if (addSucc) &#123; class_replaceMethod(selfClass, cusSEL, method_getImplementation(oriMethod), method_getTypeEncoding(oriMethod)); &#125;else &#123; method_exchangeImplementations(oriMethod, cusMethod); &#125; &#125;);&#125;- (void)mySendAction:(SEL)action to:(id)target forEvent:(UIEvent *)event &#123; [CountTool addClickCount]; [self mySendAction:action to:target forEvent:event];&#125;@end load方法会在类第一次加载的时候被调用,调用的时间比较靠前，适合在这个方法里做方法交换,方法交换应该被保证，在程序中只会执行一次。 6.实现NSCoding的自动归档和解档如果你实现过自定义模型数据持久化的过程，那么你也肯定明白，如果一个模型有许多个属性，那么我们需要对每个属性都实现一遍encodeObject 和 decodeObjectForKey方法，如果这样的模型又有很多个，这还真的是一个十分麻烦的事情。下面来看看简单的实现方式。假设现在有一个Movie类，有3个属性，它的h文件这这样的 12345678910#import &lt;Foundation/Foundation.h&gt;//1. 如果想要当前类可以实现归档与反归档，需要遵守一个协议NSCoding@interface Movie : NSObject&lt;NSCoding&gt;@property (nonatomic, copy) NSString *movieId;@property (nonatomic, copy) NSString *movieName;@property (nonatomic, copy) NSString *pic_url;@end 如果是正常写法， m文件应该是这样的： 123456789101112131415161718192021#import &quot;Movie.h&quot;@implementation Movie- (void)encodeWithCoder:(NSCoder *)aCoder&#123; [aCoder encodeObject:_movieId forKey:@&quot;id&quot;]; [aCoder encodeObject:_movieName forKey:@&quot;name&quot;]; [aCoder encodeObject:_pic_url forKey:@&quot;url&quot;]; &#125;- (id)initWithCoder:(NSCoder *)aDecoder&#123; if (self = [super init]) &#123; self.movieId = [aDecoder decodeObjectForKey:@&quot;id&quot;]; self.movieName = [aDecoder decodeObjectForKey:@&quot;name&quot;]; self.pic_url = [aDecoder decodeObjectForKey:@&quot;url&quot;]; &#125; return self;&#125;@end 如果这里有100个属性，那么我们也只能把100个属性都给写一遍。不过你会使用runtime后，这里就有更简便的方法。下面看看runtime的实现方式： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#import &quot;Movie.h&quot;#import &lt;objc/runtime.h&gt;@implementation Movie- (void)encodeWithCoder:(NSCoder *)encoder&#123; unsigned int count = 0; Ivar *ivars = class_copyIvarList([Movie class], &amp;count); for (int i = 0; i&lt;count; i++) &#123; // 取出i位置对应的成员变量 Ivar ivar = ivars[i]; // 查看成员变量 const char *name = ivar_getName(ivar); // 归档 NSString *key = [NSString stringWithUTF8String:name]; id value = [self valueForKey:key]; [encoder encodeObject:value forKey:key]; &#125; free(ivars);&#125;- (id)initWithCoder:(NSCoder *)decoder&#123; if (self = [super init]) &#123; unsigned int count = 0; Ivar *ivars = class_copyIvarList([Movie class], &amp;count); for (int i = 0; i&lt;count; i++) &#123; // 取出i位置对应的成员变量 Ivar ivar = ivars[i]; // 查看成员变量 const char *name = ivar_getName(ivar); // 归档 NSString *key = [NSString stringWithUTF8String:name]; id value = [decoder decodeObjectForKey:key]; // 设置到成员变量身上 [self setValue:value forKey:key]; &#125; free(ivars); &#125; return self;&#125;@end 这样的方式实现，不管有多少个属性，写这几行代码就搞定了。怎么，还嫌麻烦，下面看看更加简便的方法：两句代码搞定。我们把encodeWithCoder 和 initWithCoder这两个方法抽成宏 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#import &quot;Movie.h&quot;#import &lt;objc/runtime.h&gt;#define encodeRuntime(A) \\unsigned int count = 0;\Ivar *ivars = class_copyIvarList([A class], &amp;count);\for (int i = 0; i&lt;count; i++) &#123;\Ivar ivar = ivars[i];\const char *name = ivar_getName(ivar);\NSString *key = [NSString stringWithUTF8String:name];\id value = [self valueForKey:key];\[encoder encodeObject:value forKey:key];\&#125;\free(ivars);\\#define initCoderRuntime(A) \\if (self = [super init]) &#123;\unsigned int count = 0;\Ivar *ivars = class_copyIvarList([A class], &amp;count);\for (int i = 0; i&lt;count; i++) &#123;\Ivar ivar = ivars[i];\const char *name = ivar_getName(ivar);\NSString *key = [NSString stringWithUTF8String:name];\id value = [decoder decodeObjectForKey:key];\[self setValue:value forKey:key];\&#125;\free(ivars);\&#125;\return self;\\@implementation Movie- (void)encodeWithCoder:(NSCoder *)encoder&#123; encodeRuntime(Movie)&#125;- (id)initWithCoder:(NSCoder *)decoder&#123; initCoderRuntime(Movie)&#125;@end 我们可以把这两个宏单独放到一个文件里面，这里以后需要进行数据持久化的模型都可以直接使用这两个宏。 7.实现字典转模型的自动转换字典转模型的应用可以说是每个app必然会使用的场景,虽然实现的方式略有不同，但是原理都是一致的：遍历模型中所有属性，根据模型的属性名，去字典中查找key，取出对应的值，给模型的属性赋值。像几个出名的开源库：JSONModel,MJExtension等都是通过这种方式实现的。 先实现最外层的属性转换 1234567891011121314151617181920212223242526// 创建对应模型对象 id objc = [[self alloc] init]; unsigned int count = 0; // 1.获取成员属性数组 Ivar *ivarList = class_copyIvarList(self, &amp;count); // 2.遍历所有的成员属性名,一个一个去字典中取出对应的value给模型属性赋值 for (int i = 0; i &lt; count; i++) &#123; // 2.1 获取成员属性 Ivar ivar = ivarList[i]; // 2.2 获取成员属性名 C -&gt; OC 字符串 NSString *ivarName = [NSString stringWithUTF8String:ivar_getName(ivar)]; // 2.3 _成员属性名 =&gt; 字典key NSString *key = [ivarName substringFromIndex:1]; // 2.4 去字典中取出对应value给模型属性赋值 id value = dict[key]; // 获取成员属性类型 NSString *ivarType = [NSString stringWithUTF8String:ivar_getTypeEncoding(ivar)]; &#125; 如果模型比较简单，只有NSString，NSNumber等，这样就可以搞定了。但是如果模型含有NSArray，或者NSDictionary等，那么我们还需要进行第二步转换。 内层数组，字典的转换 1234567891011121314151617181920212223242526272829303132333435363738394041424344if ([value isKindOfClass:[NSDictionary class]] &amp;&amp; ![ivarType containsString:@&quot;NS&quot;]) &#123; // 是字典对象,并且属性名对应类型是自定义类型 // 处理类型字符串 @\&quot;User\&quot; -&gt; User ivarType = [ivarType stringByReplacingOccurrencesOfString:@&quot;@&quot; withString:@&quot;&quot;]; ivarType = [ivarType stringByReplacingOccurrencesOfString:@&quot;\&quot;&quot; withString:@&quot;&quot;]; // 自定义对象,并且值是字典 // value:user字典 -&gt; User模型 // 获取模型(user)类对象 Class modalClass = NSClassFromString(ivarType); // 字典转模型 if (modalClass) &#123; // 字典转模型 user value = [modalClass objectWithDict:value]; &#125; &#125; if ([value isKindOfClass:[NSArray class]]) &#123; // 判断对应类有没有实现字典数组转模型数组的协议 if ([self respondsToSelector:@selector(arrayContainModelClass)]) &#123; // 转换成id类型，就能调用任何对象的方法 id idSelf = self; // 获取数组中字典对应的模型 NSString *type = [idSelf arrayContainModelClass][key]; // 生成模型 Class classModel = NSClassFromString(type); NSMutableArray *arrM = [NSMutableArray array]; // 遍历字典数组，生成模型数组 for (NSDictionary *dict in value) &#123; // 字典转模型 id model = [classModel objectWithDict:dict]; [arrM addObject:model]; &#125; // 把模型数组赋值给value value = arrM; &#125; &#125; 我自己觉得系统自带的KVC模式字典转模型就挺好的，假设movie是一个模型对象，dict 是一个需要转化的 [movie setValuesForKeysWithDictionary:dict]; 这个是系统自带的字典转模型方法，个人感觉也还是挺好用的，不过使用这个方法的时候需要在模型里面再实现一个方法才行，- (void)setValue:(id)value forUndefinedKey:(NSString *)key 重写这个方法为了实现两个目的：1. 模型中的属性和字典中的key不一致的情况，比如字典中有个id,我们需要把它赋值给uid属性；2. 字典中属性比模型的属性还多的情况。如果出现以上两种情况而没有实现这个方法的话，程序就会崩溃。这个方法的实现： 123456- (void)setValue:(id)value forUndefinedKey:(NSString *)key&#123; if ([key isEqualToString:@&quot;id&quot;]) &#123; self.uid = value; &#125;&#125; 六.几个参数概念以上的几种方法应该算是runtime在实际场景中所应用的大部分的情况了，平常的编码中差不多足够用了。如果从头仔细看到尾，相信你基本的用法应该会了，虽然会用是主要的目的，有几个基本的参数概念还是要了解一下的。 1.objc_msgSend 123456789/* Basic Messaging Primitives** On some architectures, use objc_msgSend_stret for some struct return types.* On some architectures, use objc_msgSend_fpret for some float return types.* On some architectures, use objc_msgSend_fp2ret for some float return types.** These functions must be cast to an appropriate function pointer type * before being called. */ 这是官方的声明，从这个函数的注释可以看出来了，这是个最基本的用于发送消息的函数。另外，这个函数并不能发送所有类型的消息，只能发送基本的消息。比如，在一些处理器上，我们必须使用objc_msgSend_stret来发送返回值类型为结构体的消息，使用objc_msgSend_fpret来发送返回值类型为浮点类型的消息，而又在一些处理器上，还得使用objc_msgSend_fp2ret来发送返回值类型为浮点类型的消息。最关键的一点：无论何时，要调用objc_msgSend函数，必须要将函数强制转换成合适的函数指针类型才能调用。从objc_msgSend函数的声明来看，它应该是不带返回值的，但是我们在使用中却可以强制转换类型，以便接收返回值。另外，它的参数列表是可以任意多个的，前提也是要强制函数指针类型。其实编译器会根据情况在objc_msgSend, objc_msgSend_stret, objc_msgSendSuper, 或 objc_msgSendSuper_stret四个方法中选择一个来调用。如果消息是传递给超类，那么会调用名字带有”Super”的函数；如果消息返回值是数据结构而不是简单值时，那么会调用名字带有”stret”的函数。 2.SELobjc_msgSend函数第二个参数类型为SEL，它是selector在Objc中的表示类型（Swift中是Selector类）。selector是方法选择器，可以理解为区分方法的 ID，而这个 ID 的数据结构是SEL:typedef struct objc_selector *SEL;其实它就是个映射到方法的C字符串，你可以用 Objc 编译器命令@selector()或者 Runtime 系统的sel_registerName函数来获得一个SEL类型的方法选择器。不同类中相同名字的方法所对应的方法选择器是相同的，即使方法名字相同而变量类型不同也会导致它们具有相同的方法选择器，于是 Objc 中方法命名有时会带上参数类型(NSNumber一堆抽象工厂方法)，Cocoa 中有好多长长的方法哦。 3.idobjc_msgSend第一个参数类型为id，大家对它都不陌生，它是一个指向类实例的指针：typedef struct objc_object *id;那objc_object又是啥呢：struct objc_object { Class isa; };objc_object结构体包含一个isa指针，根据isa指针就可以顺藤摸瓜找到对象所属的类。PS:isa指针不总是指向实例对象所属的类，不能依靠它来确定类型，而是应该用class方法来确定实例对象的类。因为KVO的实现机理就是将被观察对象的isa指针指向一个中间类而不是真实的类，这是一种叫做 isa-swizzling 的技术，详见官方文档. 4.Class之所以说isa是指针是因为Class其实是一个指向objc_class结构体的指针：typedef struct objc_class *Class;objc_class里面的东西多着呢： 123456789101112131415struct objc_class &#123; Class isa OBJC_ISA_AVAILABILITY;#if !__OBJC2__ Class super_class OBJC2_UNAVAILABLE; const char *name OBJC2_UNAVAILABLE; long version OBJC2_UNAVAILABLE; long info OBJC2_UNAVAILABLE; long instance_size OBJC2_UNAVAILABLE; struct objc_ivar_list *ivars OBJC2_UNAVAILABLE; struct objc_method_list **methodLists OBJC2_UNAVAILABLE; struct objc_cache *cache OBJC2_UNAVAILABLE; struct objc_protocol_list *protocols OBJC2_UNAVAILABLE;#endif&#125; OBJC2_UNAVAILABLE; 可以看到运行时一个类还关联了它的超类指针，类名，成员变量，方法，缓存，还有附属的协议。在objc_class结构体中：ivars是objc_ivar_list指针；methodLists是指向objc_method_list指针的指针。也就是说可以动态修改 *methodLists 的值来添加成员方法，这也是Category实现的原理. 上面讲到的所有东西都在Demo里，如果你觉得不错，还请为我的Demo star一个。demo下载]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS release,debug版设置不同的AppIcon]]></title>
      <url>%2F2016%2F04%2F13%2FiOS-release-debug%E7%89%88%E8%AE%BE%E7%BD%AE%E4%B8%8D%E5%90%8C%E7%9A%84AppIcon%2F</url>
      <content type="text"><![CDATA[也许你也遇到过这种情况，产品经理或者测试让你给装个测试包，一会装正式环境的，一会又装测试环境的，一会又装个灰度环境的。弄来弄去的有时候自己都搞不清楚测试包是什么环境下的。 通过判断debug还是release环境，我们可以用很多种方法来区分这两种环境，这里最简单而且效果非常好的一种方法。不同的环境下采用不同的图标，这样软件一安装上就可以非常明显的分辨出来。 第一步创建一个新的AppIcon 第二步给两个AppIcon分别加入不同的图片 第三步在build Setting 里面搜索 icon，找到Asset catalog AppIcon set name 第四步分别给debug和release设置不同的AppIcon。到这里就全部完成了，快去试试吧。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS公共库]]></title>
      <url>%2F2016%2F04%2F06%2FiOS%E5%85%AC%E5%85%B1%E5%BA%93%2F</url>
      <content type="text"><![CDATA[第一步 打开Xcode，file-&gt;new-&gt;WorkSpace,我们使用WorkSpace来管理工程和依赖库 第二步 file-&gt;new-&gt;project-&gt;Application,创建我们的工程，创建好后关闭工程 第三步 file-&gt;new-&gt;project-&gt;Framework&amp;Library-&gt;Cocoa Touch Framework,创建依赖库 第四步 新建一个Tool类，然后在Amy.h里面引入，引入的方式：#import&lt;Amy/Tool.h&gt; 第五步 回到我们的workspace目录，workspace，依赖库和工程最好放到同一目录下面。 第六步 打开workspace，通过 file-&gt; AddFile to 依次把工程和依赖添加到workspace中。 第七步 在workspace中选中工程，然后点击Build Phases，选择 link Binary With Libraries 点击 + 号，添加Amy.framework 第八步 在我们的工程中可以引入依赖使用了。引入方式：#import&lt;Amy/Tool.h&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS开发小技巧]]></title>
      <url>%2F2016%2F03%2F15%2FiOS%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8A%80%E5%B7%A7%2F</url>
      <content type="text"><![CDATA[iOS开发的一些奇巧淫技,“奇巧淫技”并非是一些稀奇古怪的技术要点，也不是什么所谓的黑科学，只是一些平时可能会用到但有些又并不是很容易查询得到的小tips. 如何查看真机沙盒文件一：安装iFunBox或IExployer二：设置在xcode的上部导航栏里，选择window -&gt; Devices,找到目标app,双击选中项目, 这样我们只能看到沙盒的目录结构,看不到实体文件。然后点击Download Container,下载后保存到桌面，右键显示包内容即可。 ###如何使用命令行进行打包? 一： 使用原生xcodebuild、xcrun 打开终端 cd到当前项目,使用如下两条命令即可。 如果项目没有使用cocoapods:xcodebuild -project 项目名.xcodeproj -target 项目名 -configuration Release(生成项目名.app文件)xcrun -sdk iphoneos -v PackageApplication ./build/Release-iphoneos/项目名.app -o ~/Desktop/项目名.ipa(-o前为.app文件路径，-o后为生成的.ipa路径) 如果使用cocoapods:xcodebuild -workspace Test.xcworkspace -scheme Test -configuration Releasexcrun -sdk iphoneos -v PackageApplication 项目名.app路径 -o ~/Desktop/Demo.ipa 二：使用xctool进行自动打包，是FaceBook开源的一个命令行工具，可使用brew安装（安装命令：sudo brew install xctool） 如果项目没有使用cocoapods:xctool -scheme Demo archive -archivePath “Demo/“(会生成.xcarchive文件)xcrun -sdk iphoneos -v PackageApplication ./Demo.xcarchive/Products/Applications/Demo.app -o ~/Desktop/Demo.ipa 如果使用cocoapods:xctool -workspace Demo.xcworkspace -scheme Demo archive -archivePath “Demo”xcrun -sdk iphoneos -v PackageApplication ./Demo.xcarchive/Products/Applications/Demo.app -o ~/Desktop/Demo.ipa Xcode历史版本下载地址https://developer.apple.com/downloads/ 加急审核渠道链接(并非只是加急，包括向苹果申诉、修改appstore上相关信息等)https://developer.apple.com/appstore/contact/appreviewteam/index.html也可以直接从ITunes右下角contact us也可以 但是无法填写相关文字描述 Autolayout及SizeClass示意图 窗口中有多个responder,如何快速释放键盘一：[[UIApplication sharedApplication] sendAction:@selector(resignFirstResponder) to:nil from:nil forEvent:nil];二：[self.view endEditing:YES];如何去除UITableView中Group样式cell的边框一： UIView *tempView = [[UIView alloc] init]; [cell setBackgroundView:tempView]; [cell setBackgroundColor:[UIColor clearColor]]; 二：tableView.separatorColor=[UIColor clearColor];如何解决colorWithPatternImage设置view背景色太占内存问题 self.view.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:@”main_landscape.jpg”]]; 切换成self.view.layer.contents =[UIImage imageNamed:@”name.png”].CGImage; App升级后如何删除NSUserDefaults全部数据APP升级后，UserDefaults中原有的plist是不会删除的，除非用户卸载APPNSString *appDomain = [[NSBundle mainBundle] bundleIdentifier];[[NSUserDefaults standardUserDefaults] removePersistentDomainForName:appDomain]; 如何修改图片颜色先设置图片的渲染模式为UIImageRenderingModeAlwaysTemplate，再设置tintcolorself.imageView.image = [[UIImage imageNamed:@”back”] imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];self.imageView.tintColor = [UIColor redColor];也可以在Asset catelog中设置render as 如何放大图片使之不失真且不产生锯齿在Asset Catalog的Attribtues Pane中设置Single(前提是图片必须是矢量图) Vector为SingleVector 如何在拉伸图片的时候使之不变形一：stretchableImageWithLeftCapWidth: topCapHeight:二：在Xcode中选中图片，然后点击右下角的Show Slicing： Storyboard中如何正确设置控件透明度在直接设置alpha的情况下，如果上面有文字的话会随着透明度的变大而变得越来越不清楚。此时应该这样设置 Background →0ther →0pacity [UIScreen mainScreen].bounds获取屏幕大小不对的问题#define SCREEN_WIDTH [UIScreen mainScreen].bounds.size.width#define iPhone6Plus ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242,2208),[[UIScreen mainScreen] currentMode].size) : NO)在标准模式下6+：[[UIScreen mainScreen] currentMode].size为{1242，2208}[UIScreen mainScreen].bounds.size为{414，736}6:[[UIScreen mainScreen] currentMode].size为{750，1334}[UIScreen mainScreen].bounds.size为{375，667} 放大模式下(设置-&gt;显示与亮度-&gt;显示模式) 6+:[[UIScreen mainScreen] currentMode].size为{1125,2001}[UIScreen mainScreen].bounds.size为{375,667}6:[[UIScreen mainScreen] currentMode].size为{640,1136}[UIScreen mainScreen].bounds.size为{320,568} Mac模式下如何将视频生成Gif文件一：使用GifBrewery直接将视频转为gif文件(安装GifBreweryw密码:www.macx.cn)二：安装ffmpeg ( brew install ffmpeg)使用ffmpeg使视频转为多张图片（ ffmpeg -i news.mov -r 10 -f image2 文件夹名/%05d.png）然后使用PicGIF (将多张图片生成gif文件)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Xcode多工程联编及工程依赖]]></title>
      <url>%2F2016%2F03%2F12%2FXcode%E5%A4%9A%E5%B7%A5%E7%A8%8B%E8%81%94%E7%BC%96%E5%8F%8A%E5%B7%A5%E7%A8%8B%E4%BE%9D%E8%B5%96%2F</url>
      <content type="text"><![CDATA[在了解xcode构建原则之前，需要熟悉workspace相关的概念，即workspace,project和target。 一:targettarget指定了构建的product,包含将workspace或project中的一组文件构建成product的指令。单个target定义一个product,它将输入（源文件和处理这些源文件的指令（包含所设定的构建settings和phases））组织进构建系统中。project和target是一对多的关系。 target会继承project的build settings，但可以以target为粒度设置build settings,且Xcode中当前一次只会有一个有效target,此有效target在xcode scheme中标识。 若target A依赖target B的输出来构建，则A依赖B，当它们存在于一个xcode workspace中的时候，Xcode会发现此依赖关系并按顺序构建。这种依赖称为隐性依赖，当然也可以在build settings中声明显性依赖，也可将隐性依赖的两个target显性声明为没有依赖。比如可能在同一个workspace中同时构建一个库并构建一个依赖这个库的应用，则xcode会选择先构建库。但如果应用想链接库的某个特定版本，则可以显性声明这个依赖关系，此时隐性依赖即被覆盖了。 二:projectxcode project是存储构建一个或多个软件产品所需的所有文件，资源和信息的仓库。project包含构建product所需的所有要素并维护它们之间的关系，它包含一个或多个targets(target指定了构建product的方式)。project定义了所有target的默认build settings，各target可以重载。Xcode project文件包含如下信息：源文件的引用：源代码（包括头文件和实现文件），library和framework(xcode内部或者外部),资源文件，interface builder文件文件结构列表中组织源文件的Groupsproject级别的build选项targetsdebug或测试program的可执行环境：从xcode运行或调试时启动哪些可以执行文件，传给可执行文件的命令行参数，程序运行时设置的环境变量总之，project可以单独存在也可以包含在workspace中，同时可以在Scheme中指定哪个Target、build配置、哪个可执行配置在某个时刻是有效的。 三:build settings一个build setting是一个指示产品某个方面构建方式的变量，比如决定xcode传给编译器的参数选项是怎样。其是一个常量或者一个公式供给xcode在构建的时候计算build setting。 四:workspaceworkspace 是组织projects和其他协同工作的文档的一份文档。除此之外，它还维护project和target之间的显性及隐性的依赖关系。默认workspace中的所有Xcode projects都在同一个目录下构建，称为workspace build directory，由于所有project的所有文件都在同一个目录下，所以所有文件都对每个project可见。比如两个project使用同一个库，则不用复制到另一个project目录中。workspace中的每个project都有其独立id,同时project可以属于多个workspace，可以单独打开project或者在其他workspace中打开，且都不用重新配置project或者workspace。可以使用workspace默认的build 目录，也可以指定一个。如果project指定了构建目录，这个目录会被project构建时所在的workspace的build目录覆盖。 五:xcode schemexcodescheme定义了一系列构建的targets，构建时的配置，和一系列执行的测试。可以有很多scheme,但同一时刻只能有一个有效的。选择scheme时，意味着你也选择了一个运行目标（product构建的硬件平台)。可以指定scheme是否存储在project中，以便包含此project的所有workspace都可以使用些scheme,当然也可以指定只存储在某个workspace中。 一般的某个应用单独新建一个 project 就可以了，然后把所有的程序文件都放在里面，这个可以满足大部分普通的需求，但是有时候，项目有可能要使用其他的项目文件，或者引入其他的静态库文件，这个时候 workspace 就派上用场了，workspace 即可以单独管理多个项目，又可以通过配置，让各个项目相互依赖，如果不用 workspace，以前的做法是如果用到其他项目的文件，要手动 copy 文件到当前的项目，在 workspace 里这个步骤不需要了。 六:案例下面是我自己的例子 ，现在用 workspace 管理2个 project，其中一个是 static library: MyStaticLib，另外一个是依赖这个静态库的 project: MyUseStatic，菜单 xocde7 &gt; file &gt; New Workspace 新建一个空的workspace，名字可以随便取。 在左边 project navigator 右键菜单 New Project ,然后选择 Ios &gt; Framework &amp; Library &gt; Cocoa Touch Static Library , 然后输入项目名称 MyStaticLib，这样就新建了一个空白的静态库项目，接着新建个类文件，名字为 MyLib, 选中 MyLib.h头文件，打开右边的 File inspector 窗口，在 Target membership 中将 MyStaticLib 后面的 project改成 public 。 在左边的 project navigator 右键菜单 New Project ,然后选择 Ios &gt; Application &gt; Single View Application，然后输入项目名称 MyUseStatic，下面配置让它依赖 MyStaticLib，打开 Build Phases配置选项 然后展开 Link Binary With Libraries ，点击 + 会看到 Workspace &gt; libMyStaticLib.a ，选中它，就让此项目产生了对 MyStaticLib的依赖关系，然后在 Build S Setting配置选项里 搜索 USER_HEADER_SEARCH_PATHS，将它的值设为 MyStaticLib 的build prouect 路径，在import静态库中的新文件时，会到这个路径中寻找。 现在编译 MyUseStatic 会自动先编译依赖的 MyStaticLib。 参考文章：http://blog.carbonfive.com/2011/04/04/using-open-source-static-libraries-in-xcode-4/#set_the_installation_directory !更多文章可前往我的blog：http://gcblog.github.io]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS缓存机制-非结构化存储]]></title>
      <url>%2F2016%2F03%2F12%2FiOS%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6-%E9%9D%9E%E7%BB%93%E6%9E%84%E5%8C%96%E5%AD%98%E5%82%A8%2F</url>
      <content type="text"><![CDATA[对于一个优秀的app来说，缓存机制必不可少。图片，视频，音频等等各种类型的文件，怎么样去更好的管理这些数据，这对于我们开发者以及用户都是息息相关的。闲话不多说，先来看看几个github开源中牛逼的几个缓存框架。 它们的使用方式都很类似，都是通过键值对(key-value)的形式进行存取，跟NSUserDefaults用法类似。 以下排名按照性能由低到高： 1.EGOCache 只提供磁盘缓存，没有内存缓存，一个比较简易的缓存框架。 2.TMCache 最初由 Tumblr 开发，但现在已经不再维护了。TMMemoryCache 实现有很多 NSCache 并没有提供的功能，比如数量限制、总容量限制、存活时间限制、内存警告或应用退到后台时清空缓存等。TMMemoryCache 在设计时，主要目标是线程安全，它把所有读写操作都放到了同一个 concurrent queue 中，然后用 dispatch_barrier_async 来保证任务能顺序执行。它错误的用了大量异步 block 回调来实现存取功能，以至于产生了很大的性能和死锁问题。它有磁盘缓存和内存缓存两部分组成，个人感觉一般好点的缓存库都会由磁盘缓存和内存缓存两部分组成，在我们第一次存储一个文件到磁盘的时候，缓存库会帮我们复制一份到内存缓存中，可以让我们在下次使用该文件的时候可以更快的找到。我上家公司就是用的这个缓存框架，挺好用的，也没出什么问题。 3.PINCache 是 Tumblr 宣布不在维护 TMCache 后，由 Pinterest 维护和改进的一个内存缓存。它的功能和接口基本和 TMCache 一样，但修复了性能和死锁的问题。它同样也用 dispatch_semaphore 来保证线程安全，但去掉了dispatch_barrier_async，避免了线程切换带来的巨大开销，也避免了可能的死锁。相当于是TMCache的优化版，而且一直有更新。 4.YYCache YYMemoryCache相对于 PINMemoryCache 来说，去掉了异步访问的接口，尽量优化了同步访问的性能，用 OSSpinLock 来保证线程安全。另外，缓存内部用双向链表和 NSDictionary 实现了 LRU 淘汰算法,性能好一点。TMDiskCache, PINDiskCache, SDWebImage 等缓存，都是基于文件系统的，即一个 Value 对应一个文件，通过文件读写来缓存数据。他们的实现都比较简单，性能也都相近，缺点也是同样的：不方便扩展、没有元数据、难以实现较好的淘汰算法、数据统计缓慢。YYDiskCache 也是采用的 SQLite 配合文件的存储方式，在 iPhone 6 64G 上的性能基准测试结果见下图。在存取小数据 (NSNumber) 时，YYDiskCache 的性能远远高出基于文件存储的库；而较大数据的存取性能则比较接近了。但得益于 SQLite 存储的元数据，YYDiskCache 实现了 LRU 淘汰算法、更快的数据统计，更多的容量控制选项。 YYCache相比较与前面几个，性能是最好的一个，但是差距也不是太大，而且他的使用需要依赖库，个人感觉用PinCache就可以了。 下面是我通过PinCache改进的KVCache，在PinCahce的基础上增加了以下几个功能。 12341. 可以设置缓存上限，设置一定时间内定时清理缓存2. 增加缓存类型，jpg，MP4，MP3，gif，等自动保存相应类型3. 增加缓存区块，不同模块的文件可以缓存到各自对应的区域4. 以上所有参数都可以根据自己的需求自行设置 demo地址 github Blog同步更新]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一分钟学会环形进度条]]></title>
      <url>%2F2016%2F02%2F27%2F%E4%B8%80%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9A%E7%8E%AF%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%9D%A1%2F</url>
      <content type="text"><![CDATA[有几篇博客写到了怎么实现环形进度条，大多是使用Core Graph来实现，实现比较麻烦且效率略低，只是一个小小的进度条而已，我们当然是用最简单而且效率高的方式来实现。先看一下这篇博客，博客地址：http://www.brighttj.com/ios/ios-implement-loop-progress.html这篇博客写的不错，不过看上去还是略微复杂了，我自己根据自己的思路整理了一下，当然目的是为了更加简洁易懂。 一：先制作一个不带颜色渐变的进度条自定义一个cycleView，在.m 中实现drawRect方法 12345678910111213141516171819- (void)drawRect:(CGRect)rect &#123; CGContextRef ctx = UIGraphicsGetCurrentContext();//获取上下文 CGPoint center = CGPointMake(100, 100); //设置圆心位置 CGFloat radius = 90; //设置半径 CGFloat startA = - M_PI_2; //圆起点位置 CGFloat endA = -M_PI_2 + M_PI * 2 * _progress; //圆终点位置 UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:center radius:radius startAngle:startA endAngle:endA clockwise:YES]; CGContextSetLineWidth(ctx, 10); //设置线条宽度 [[UIColor blueColor] setStroke]; //设置描边颜色 CGContextAddPath(ctx, path.CGPath); //把路径添加到上下文 CGContextStrokePath(ctx); //渲染&#125; 因为drawRect方法只是在视图刚刚出现的时候执行一次，所以我们需要使用 [self setNeedsDisplay]; 这个方法来进行重新绘制，在控制器里面加一个slider，滑动slider来控制进度变化 12345- (void)drawProgress:(CGFloat )progress&#123; _progress = progress; [self setNeedsDisplay];&#125; 看一下效果 如果进度条不需要加渐变色，那么这儿几行代码就完成了。 下面来实现一下带有渐变色的进度条，原理很简单，刚刚画的是一条默认是黑色的线条，我们把黑色替换成一条渐变色的线条就可以了。环形渐变色线条的制作： 第一步使用CAShapeLayer绘制出渐变层，应为它只能指定两个点之间进行渐变，所以这里需要两个CAShapeLayer，左边一个和右边一个，看一下效果图 代码实现 12345678910111213141516//生成渐变色 CALayer *gradientLayer = [CALayer layer]; //左侧渐变色 CAGradientLayer *leftLayer = [CAGradientLayer layer]; leftLayer.frame = CGRectMake(0, 0, self.bounds.size.width / 2, self.bounds.size.height); // 分段设置渐变色 leftLayer.locations = @[@0.3, @0.9, @1]; leftLayer.colors = @[(id)[UIColor yellowColor].CGColor, (id)[UIColor greenColor].CGColor]; [gradientLayer addSublayer:leftLayer]; //右侧渐变色 CAGradientLayer *rightLayer = [CAGradientLayer layer]; rightLayer.frame = CGRectMake(self.bounds.size.width / 2, 0, self.bounds.size.width / 2, self.bounds.size.height); rightLayer.locations = @[@0.3, @0.9, @1]; rightLayer.colors = @[(id)[UIColor yellowColor].CGColor, (id)[UIColor redColor].CGColor]; [gradientLayer addSublayer:rightLayer]; 这个渐变层只是一个中间变量，是不能显示出来的，我这里只是演示一下，现在我们已经拿到了渐变层gradientLayer。 第二步我们需要制作一个环形路径先看一下效果： 代码实现： 12345678910111213141516CGPoint center = CGPointMake(100, 100); CGFloat radius = 90; CGFloat startA = - M_PI_2; //设置进度条起点位置 CGFloat endA = -M_PI_2 + M_PI * 2 * _progress; //设置进度条终点位置 //获取环形路径（画一个圆形，填充色透明，设置线框宽度为10，这样就获得了一个环形） _progressLayer = [CAShapeLayer layer];//创建一个track shape layer _progressLayer.frame = self.bounds; _progressLayer.fillColor = [[UIColor clearColor] CGColor]; //填充色为无色 _progressLayer.strokeColor = [[UIColor redColor] CGColor]; //指定path的渲染颜色,这里可以设置任意不透明颜色 _progressLayer.opacity = 1; //背景颜色的透明度 _progressLayer.lineCap = kCALineCapRound;//指定线的边缘是圆的 _progressLayer.lineWidth = 10;//线的宽度 UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:center radius:radius startAngle:startA endAngle:endA clockwise:YES];//上面说明过了用来构建圆形 _progressLayer.path =[path CGPath]; //把path传递給layer，然后layer会处理相应的渲染，整个逻辑和CoreGraph是一致的。 [self.layer addSublayer:_progressLayer]; 第三步，也是最后一步了用我们在第二步生成的环形路径去截取第一步生成的渐变层 12[gradientLayer setMask:_progressLayer]; //用progressLayer来截取渐变层self.layer addSublayer:gradientLayer]; 截取的layer层就是我们最后需要的，看一看我们最后截取后得到的 到这里，我们已经完成了99%了，最后一步，根据自己的需要让它显示多少的比例就完成了。比例的控制在第二部的progress属性，比例在0-1之间，看一看最后的效果。 demo下载地址 更多原创文章可以看 我的博客]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[github ssh key 问题]]></title>
      <url>%2F2016%2F02%2F27%2Fgithub%20ssh%20key%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[当我部署hexo在github上的时候去看了一下ssh key，发现github上早就有ssh key了，但是我从来没有手动去生成过，并且这个key的名字与手动生成的不一样，文件名是这样github_rsa，当然还有另外一个pub格式的，而如果我们手动生成的话，必然是id_rsa,除非我们自己改名。这个key应该是我安装github客户端的时候生成的，不过我可以在github提交代码，hexo也部署成功了，这些东西也从来没去了解过，然后这次出问题了，折腾了很久。 我打算把博客迁移到gitcafe上，然后我申请了一个gitcafe账号，然后也是配置相关ssh key，当我生成了gitcafe 的ssh key 后，我的github 就不能提交代码了。可恶的是我在gitcafe上添加ssh key后，也是提交不了代码，现在我两个地方都不能用了。现在我的ssh是这样的，github是github_rsa，gitcafe是id_rsa，然后我又在网上搜索管理多个ssh key方法，通过config配置，但是还是没有用。最后搞了很久，实在没有办法，我就先把gitcafe 的 key 给删了，看看github能不能用了，结果发现github还是不能用，这回蛋疼了。最后终于决定，我把ssh目录给清空了，然后重新手动生成github ssh key，这回github能用了，有点劫后余生的感觉，毕竟公司的代码就托管在github上，要是不能用了，工作都做不了。然后我又有些不甘心，再次尝试 gitcafe的 ssh key，然后在通过config管理，这回能用了。 原因就在于第一个github的key不是我自己生成的，如果你也遇到此类问题，可以试试清空哪些不是自己生成的key。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS视频边下边播--缓存视频数据流]]></title>
      <url>%2F2016%2F02%2F25%2FiOS%E8%A7%86%E9%A2%91%E8%BE%B9%E4%B8%8B%E8%BE%B9%E6%92%AD-%E7%BC%93%E5%AD%98%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE%E6%B5%81%2F</url>
      <content type="text"><![CDATA[google搜索“iOS视频变下边播”，有好几篇博客写到了实现方法，其实只有一篇，其他都是copy的，不过他们都是使用的本地代理服务器的方式，原理很简单，但是缺点也很明显，需要自己写一个本地代理服务器或者使用第三方库httpSever。如果使用httpSever作为本地代理服务器，如果只缓存一个视频是没有问题的，如果缓存多个视频互相切换，本地代理服务器提供的数据很不稳定，crash概率非常大。 这里我采用ios7以后系统自带的方法实现视频边下边播，这里的边下边播不是单独开一个子线程去下载，而是把视频播放的数据给保存到本地。简而言之，就是使用一遍的流量，既播放了视频，也保存了视频。 123用到的框架：&lt;AVFoundation/AVFoundation.h&gt;用到的播放器：AVplayer 先说一下avplayer自身的播放原理，当我们给播放器设置好url等一些参数后，播放器就会向url所在的服务器发送请求(请求参数有两个值，一个是offset偏移量，另一个是length长度，其实就相当于NSRange一样)，服务器就根据range参数给播放器返回数据。这就是大致的原理，当然实际的过程还是略微比较复杂。 一:下面进入主题产品需求： 1.支持正常播放器的一切功能，包括暂停、播放和拖拽 2.如果视频加载完成且完整，将视频文件保存到本地cache，下一次播放本地cache中的视频，不再请求网络数据 3.如果视频没有加载完（半路关闭或者拖拽）就不用保存到本地cache 实现方案: 需要在视频播放器和服务器之间添加一层类似代理的机制，视频播放器不再直接访问服务器，而是访问代理对象，代理对象去访问服务器获得数据，之后返回给视频播放器，同时代理对象根据一定的策略缓存数据。 2.AVURLAsset中的resourceLoader可以实现这个机制，resourceLoader的delegate就是上述的代理对象。 3.视频播放器在开始播放之前首先检测是本地cache中是否有此视频，如果没有才通过代理获得数据，如果有，则直接播放本地cache中的视频即可。 视频播放器需要实现的功能 1.有开始暂停按钮 2.显示播放进度及总时长 3.可以通过拖拽从任意位置开始播放视频 4.视频加载中的过程和加载失败需要有相应的提示 代理对象需要实现的功能 1.接收视频播放器的请求，并根据请求的range向服务器请求本地没有获得的数据 2.缓存向服务器请求回的数据到本地 3.如果向服务器的请求出现错误，需要通知给视频播放器，以便视频播放器对用户进行提示 二：具体流程 视频播放器处理流程 1.当开始播放视频时，通过视频url判断本地cache中是否已经缓存当前视频，如果有，则直接播放本地cache中视频 2.如果本地cache中没有视频，则视频播放器向代理请求数据 3.加载视频时展示正在加载的提示（菊花转） 4.如果可以正常播放视频，则去掉加载提示，播放视频，如果加载失败，去掉加载提示并显示失败提示 5.在播放过程中如果由于网络过慢或拖拽原因导致没有播放数据时，要展示加载提示，跳转到第4步 代理对象处理流程 1.当视频播放器向代理请求dataRequest时，判断代理是否已经向服务器发起了请求，如果没有，则发起下载整个视频文件的请求 2.如果代理已经和服务器建立链接，则判断当前的dataRequest请求的offset是否大于当前已经缓存的文件的offset，如果大于则取消当前与服务器的请求，并从offset开始到文件尾向服务器发起请求（此时应该是由于播放器向后拖拽，并且超过了已缓存的数据时才会出现） 3.如果当前的dataRequest请求的offset小于已经缓存的文件的offset，同时大于代理向服务器请求的range的offset，说明有一部分已经缓存的数据可以传给播放器，则将这部分数据返回给播放器（此时应该是由于播放器向前拖拽，请求的数据已经缓存过才会出现） 4.如果当前的dataRequest请求的offset小于代理向服务器请求的range的offset，则取消当前与服务器的请求，并从offset开始到文件尾向服务器发起请求（此时应该是由于播放器向前拖拽，并且超过了已缓存的数据时才会出现） 5.只要代理重新向服务器发起请求，就会导致缓存的数据不连续，则加载结束后不用将缓存的数据放入本地cache 6.如果代理和服务器的链接超时，重试一次，如果还是错误则通知播放器网络错误 7.如果服务器返回其他错误，则代理通知播放器网络错误 三：resourceLoader的难点处理1234567- (BOOL)resourceLoader:(AVAssetResourceLoader *)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest *)loadingRequest&#123; [self.pendingRequests addObject:loadingRequest]; [self dealWithLoadingRequest:loadingRequest]; return YES;&#125; 播放器发出的数据请求从这里开始，我们保存从这里发出的所有请求存放到数组，自己来处理这些请求，当一个请求完成后，对请求发出finishLoading消息，并从数组中移除。正常状态下，当播放器发出下一个请求的时候，会把上一个请求给finish。 下面这个方法发出的请求说明播放器自己关闭了这个请求，我们不需要再对这个请求进行处理，系统每次结束一个旧的请求，便必然会发出一个或多个新的请求，除了播放器已经获得整个视频完整的数据，这时候就不会再发起请求。 12345- (void)resourceLoader:(AVAssetResourceLoader *)resourceLoader didCancelLoadingRequest:(AVAssetResourceLoadingRequest *)loadingRequest&#123; [self.pendingRequests removeObject:loadingRequest]; &#125; 下面这个方法是对播放器发出的请求进行填充数据 1234567891011121314151617181920212223242526272829303132333435363738- (BOOL)respondWithDataForRequest:(AVAssetResourceLoadingDataRequest *)dataRequest&#123; long long startOffset = dataRequest.requestedOffset; if (dataRequest.currentOffset != 0) &#123; startOffset = dataRequest.currentOffset; &#125; if ((self.task.offset +self.task.downLoadingOffset) &lt; startOffset) &#123; //NSLog(@&quot;NO DATA FOR REQUEST&quot;); return NO; &#125; if (startOffset &lt; self.task.offset) &#123; return NO; &#125; NSData *filedata = [NSData dataWithContentsOfURL:[NSURL fileURLWithPath:_videoPath] options:NSDataReadingMappedIfSafe error:nil]; // This is the total data we have from startOffset to whatever has been downloaded so far NSUInteger unreadBytes = self.task.downLoadingOffset - ((NSInteger)startOffset - self.task.offset); // Respond with whatever is available if we can&apos;t satisfy the request fully yet NSUInteger numberOfBytesToRespondWith = MIN((NSUInteger)dataRequest.requestedLength, unreadBytes); [dataRequest respondWithData:[filedata subdataWithRange:NSMakeRange((NSUInteger)startOffset- self.task.offset, (NSUInteger)numberOfBytesToRespondWith)]]; long long endOffset = startOffset + dataRequest.requestedLength; BOOL didRespondFully = (self.task.offset + self.task.downLoadingOffset) &gt;= endOffset; return didRespondFully; &#125; 这是对存放所有的请求的数组进行处理 123456789101112131415161718192021- (void)processPendingRequests&#123; NSMutableArray *requestsCompleted = [NSMutableArray array]; //请求完成的数组 //每次下载一块数据都是一次请求，把这些请求放到数组，遍历数组 for (AVAssetResourceLoadingRequest *loadingRequest in self.pendingRequests) &#123; [self fillInContentInformation:loadingRequest.contentInformationRequest]; //对每次请求加上长度，文件类型等信息 BOOL didRespondCompletely = [self respondWithDataForRequest:loadingRequest.dataRequest]; //判断此次请求的数据是否处理完全 if (didRespondCompletely) &#123; [requestsCompleted addObject:loadingRequest]; //如果完整，把此次请求放进 请求完成的数组 [loadingRequest finishLoading]; &#125; &#125; [self.pendingRequests removeObjectsInArray:requestsCompleted]; //在所有请求的数组中移除已经完成的 &#125; resourceLoader的难点基本上就是上面这点了，说到播放器，下面便顺便讲下AVPlayer的难点。 四：难点：对播放器状态的捕获 1.举个简单的例子，视频总长度60分，现在缓冲的数据才10分钟，然后拖动到20分钟的位置进行播放，在网速较慢的时候，视频从当前位置开始播放，必然会出现一段时间的卡顿，为了有一个更好的用户体验，在卡顿的时候，我们需要加一个菊花转的状态，现在问题就来了。 2.在拖动到未缓冲区域内，是否需要加菊花转，如果加，要显示多久再消失，而且如果在网速很慢的时候，播放器如果等了太久，哪怕最后有数据了，播放器也已经“死”了，它自己无法恢复播放，这个时候需要我们人为的去恢复播放，如果恢复播放不成功，那么过一段时间需要再次恢复播放，是否恢复播放成功，这里也需要捕获其状态。所以，如果要有一个好的用户体验，我们需要时时知道播放器的状态。 有两个状态需要捕获，一个是正在缓冲，一个是正在播放，监听播放的“playbackBufferEmpty”属性就可以捕获正在缓冲状态，播放器的时间监听器则可以捕获正在播放状态，我的demo中一共有4个状态： 123456typedef NS_ENUM(NSInteger, TBPlayerState) &#123; TBPlayerStateBuffering = 1, TBPlayerStatePlaying = 2, TBPlayerStateStopped = 3, TBPlayerStatePause = 4&#125;; 这样可以对播放器更好的把握和处理了。然后说一说在缓冲时候的处理，以及缓冲后多久去播放，处理方法：进入缓冲状态后，缓冲2秒后去手动播放，如果播放不成功（缓冲的数据太少，还不足以播放），那就再缓冲2秒再次播放，如此循环，看详细代码： 123456789101112131415161718192021222324252627- (void)bufferingSomeSecond&#123; // playbackBufferEmpty会反复进入，因此在bufferingOneSecond延时播放执行完之前再调用bufferingSomeSecond都忽略 static BOOL isBuffering = NO; if (isBuffering) &#123; return; &#125; isBuffering = YES; // 需要先暂停一小会之后再播放，否则网络状况不好的时候时间在走，声音播放不出来 [self.player pause]; dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123; // 如果此时用户已经暂停了，则不再需要开启播放了 if (self.isPauseByUser) &#123; isBuffering = NO; return; &#125; [self.player play]; // 如果执行了play还是没有播放则说明还没有缓存好，则再次缓存一段时间 isBuffering = NO; if (!self.currentPlayerItem.isPlaybackLikelyToKeepUp) &#123; [self bufferingSomeSecond]; &#125; &#125;);&#125; 这个demo花了我很长的时间，实现这个demo我也遇到了很多坑最后才完成的，现在我奉献出来，也许对你会有所帮助。如果你觉得不错，还请为我Star一个，也算是对我的支持和鼓励。 demo下载地址也可以去我的简书博客查看更多文章博客地址]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS性能监测]]></title>
      <url>%2F2016%2F02%2F25%2FiOS%E6%80%A7%E8%83%BD%E7%9B%91%E6%B5%8B%2F</url>
      <content type="text"><![CDATA[iOS开发中，如果是由于占用内存或者cpu过高导致性能下降，使用Instruments比较容易那些造成性能低下的”罪魁祸首”，在开发测试阶段它可以帮助我们分析软件运行的性能消耗，但是这可定是远远不够的，我们需要一个工具，可以在正式环境中由大量用户在使用过程中监控、分析到的数据更能解决一些隐藏的问题. Time Profiler可以查看多个线程中每个方法的耗时。 对Xcode进行设置1. 不设置该选项，只能看到一堆栈如果想要在TimeProfile中直观的查看方法耗时，需要对Xcode进行设置在Xcode-&gt;Build Setting-&gt;Debug Information Format中设置选项为：DWARF with DSYM File 对TimeProfile进行设置1.在TimeProfile的Call Tree中，右侧面板有三个检查器：record setting（记录设置）、display setting（展示设置）、还有extends detail（扩展详情） 2.我们选择display setting，并在该选择器中勾选Separate by Thread和Hide System Libraries（两个最基本的选项） 3.这样就可以逐级查看每个方法的耗时了 Allocations这里可以对每个动作的前后进行Generations，对比内存的增加，查看使内存增加的具体的方法和代码所在位置。具体操作是在右侧Generation Analysis里点击Mark Generation，这样会产生一个Generation，切换到其他页面或一段时间产生了另外一个事件时再点Mark Generation来产生一个新的Generation，这样反复，生成多个Generation，查看这几个Generation会看到Growth的大小，如果太大可以点进去查看相应占用较大的线程里右侧Heaviest Stack Trace里查看对应的代码块，然后进行相应的处理。 Leak可以在上面区域的Leaks部分看到对应的时间点产生的溢出，选择后在下面区域的Statistics&gt;Allocation Summary能够看到泄漏的对象，同样可以通过Stack Trace查看到具体对应的代码区域。 UIImage这里要主要是会影响内存的开销，需要权衡下imagedNamed和imageWithContentsOfFile，了解两者特性后，在只需要显示一次的图片用后者，这样会减少内存的消耗，但是页面显示会增加Image IO的消耗，这个需要注意下。由于imageWithContentsOfFile不缓存，所以需要在每次页面显示前加载一次，这个IO的操作也是需要考虑权衡的一个点。 页面加载如果一个页面内容过多，view过多，这样将长页面中的需要滚动才能看到的那个部分视图内容通过开启新的线程同步的加载。 优化首次加载时间通过Time Profier可以查看到启动所占用的时间，如果太长可以通过Heaviest Stack Trace找到费时的方法进行改造。 寻找卡顿的切入点 监控卡顿,最直接就是找到主线程都在干些啥玩意儿.我们知道一个线程的消息事件处理都是依赖于NSRunLoop来驱动,所以要知道线程正在调用什么方法,就需要从NSRunLoop来入手.CFRunLoop的代码是开源,可以在此处查阅到源代码http://opensource.apple.com/source/CF/CF-1151.16/CFRunLoop.c,其中核心方法CFRunLoopRun简化后的主要逻辑大概是这样的: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748int32_t __CFRunLoopRun()&#123; //通知即将进入runloop __CFRunLoopDoObservers(KCFRunLoopEntry); do &#123; // 通知将要处理timer和source __CFRunLoopDoObservers(kCFRunLoopBeforeTimers); __CFRunLoopDoObservers(kCFRunLoopBeforeSources); __CFRunLoopDoBlocks(); //处理非延迟的主线程调用 __CFRunLoopDoSource0(); //处理UIEvent事件 //GCD dispatch main queue CheckIfExistMessagesInMainDispatchQueue(); // 即将进入休眠 __CFRunLoopDoObservers(kCFRunLoopBeforeWaiting); // 等待内核mach_msg事件 mach_port_t wakeUpPort = SleepAndWaitForWakingUpPorts(); // Zzz... // 从等待中醒来 __CFRunLoopDoObservers(kCFRunLoopAfterWaiting); // 处理因timer的唤醒 if (wakeUpPort == timerPort) __CFRunLoopDoTimers(); // 处理异步方法唤醒,如dispatch_async else if (wakeUpPort == mainDispatchQueuePort) __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__() // UI刷新,动画显示 else __CFRunLoopDoSource1(); // 再次确保是否有同步的方法需要调用 __CFRunLoopDoBlocks(); &#125; while (!stop &amp;&amp; !timeout); //通知即将退出runloop __CFRunLoopDoObservers(CFRunLoopExit);&#125; 不难发现NSRunLoop调用方法主要就是在kCFRunLoopBeforeSources和kCFRunLoopBeforeWaiting之间,还有kCFRunLoopAfterWaiting之后,也就是如果我们发现这两个时间内耗时太长,那么就可以判定出此时主线程卡顿. ###量化卡顿的程度 要监控NSRunLoop的状态,我们需要使用到CFRunLoopObserverRef,通过它可以实时获得这些状态值的变化,具体的使用如下: 1234567891011121314151617static void runLoopObserverCallBack(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info)&#123; MyClass *object = (__bridge MyClass*)info; object-&gt;activity = activity;&#125;- (void)registerObserver&#123; CFRunLoopObserverContext context = &#123;0,(__bridge void*)self,NULL,NULL&#125;; CFRunLoopObserverRef observer = CFRunLoopObserverCreate(kCFAllocatorDefault, kCFRunLoopAllActivities, YES, 0, &amp;runLoopObserverCallBack, &amp;context); CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes);&#125; 只需要另外再开启一个线程,实时计算这两个状态区域之间的耗时是否到达某个阀值,便能揪出这些性能杀手.为了让计算更精确,需要让子线程更及时的获知主线程NSRunLoop状态变化,所以dispatch_semaphore_t是个不错的选择,另外卡顿需要覆盖到多次连续小卡顿和单次长时间卡顿两种情景,所以判定条件也需要做适当优化.将上面两个方法添加计算的逻辑如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263static void runLoopObserverCallBack(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info)&#123; PerformanceMonitor *moniotr = (__bridge PerformanceMonitor*)info; moniotr-&gt;activity = activity; dispatch_semaphore_t semaphore = moniotr-&gt;semaphore; dispatch_semaphore_signal(semaphore);&#125;- (void)startMonitor&#123; if (observer) return; // 信号,Dispatch Semaphore保证同步 semaphore = dispatch_semaphore_create(0); // 注册RunLoop状态观察 CFRunLoopObserverContext context = &#123;0,(__bridge void*)self,NULL,NULL&#125;; observer = CFRunLoopObserverCreate(kCFAllocatorDefault, kCFRunLoopAllActivities, YES, 0, &amp;runLoopObserverCallBack, &amp;context); //将观察者添加到主线程runloop的common模式下的观察中 CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes); // 在子线程监控时长 开启一个持续的loop用来进行监控 dispatch_async(dispatch_get_global_queue(0, 0), ^&#123; while (YES) &#123; //假定连续5次超时50ms认为卡顿(当然也包含了单次超时250ms) long st = dispatch_semaphore_wait(semaphore, dispatch_time(DISPATCH_TIME_NOW, 50*NSEC_PER_MSEC)); if (st != 0) &#123; if (!observer) &#123; timeoutCount = 0; semaphore = 0; activity = 0; return; &#125; //两个runloop的状态，BeforeSources和AfterWaiting这两个状态区间时间能够检测到是否卡顿 if (activity==kCFRunLoopBeforeSources || activity==kCFRunLoopAfterWaiting) &#123; if (++timeoutCount &lt; 5) continue; PLCrashReporterConfig *config = [[PLCrashReporterConfig alloc] initWithSignalHandlerType:PLCrashReporterSignalHandlerTypeBSD symbolicationStrategy:PLCrashReporterSymbolicationStrategyAll]; PLCrashReporter *crashReporter = [[PLCrashReporter alloc] initWithConfiguration:config]; NSData *data = [crashReporter generateLiveReport]; PLCrashReport *reporter = [[PLCrashReport alloc] initWithData:data error:NULL]; NSString *report = [PLCrashReportTextFormatter stringValueForCrashReport:reporter withTextFormat:PLCrashReportTextFormatiOS]; //上传服务器 NSLog(@&quot;此处发生卡顿:---%@&quot;, report); &#125;//end activity &#125;// end semaphore wait timeoutCount = 0; &#125;// end while &#125;);&#125; 记录卡顿的函数调用 监控到了卡顿现场,当然下一步便是记录此时的函数调用信息,此处可以使用一个第三方Crash收集组件PLCrashReporter,它不仅可以收集Crash信息也可用于实时获取各线程的调用堆栈,使用示例如下: 12345678PLCrashReporterConfig *config = [[PLCrashReporterConfig alloc] initWithSignalHandlerType:PLCrashReporterSignalHandlerTypeBSD symbolicationStrategy:PLCrashReporterSymbolicationStrategyAll];PLCrashReporter *crashReporter = [[PLCrashReporter alloc] initWithConfiguration:config];NSData *data = [crashReporter generateLiveReport];PLCrashReport *reporter = [[PLCrashReport alloc] initWithData:data error:NULL];NSString *report = [PLCrashReportTextFormatter stringValueForCrashReport:reporter withTextFormat:PLCrashReportTextFormatiOS]; 当检测到卡顿时,抓取堆栈信息,然后在客户端做一些过滤处理,便可以上报到服务器,通过收集一定量的卡顿数据后经过分析便能准确定位需要优化的逻辑. demo地址]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用GitHub搭建Hexo博客]]></title>
      <url>%2F2016%2F02%2F23%2FGitHub%2BHexo%2F</url>
      <content type="text"><![CDATA[来到GitHub这么长时间，才开始真真的了解GitHub，这个国外的代码托管平台，充满着大牛的身影。国内也有不多少的代码托管平台，本文将就用GitHub的GitHub Pages 功能来搭建，比起WordPress，hexo的搭建更加简洁，配合上markdown的使用，更加便捷的管理自己的学习文档。 概况 为什么选择GitHub Pages1、GitHub Pages有免费的代码托管空间，资料自己管理，保存可靠；2、学着用 GitHub，享受 GitHub 的便利，上面有很多大牛，眼界会开阔很多；3、顺便理解 GitHub 工作原理，最好的团队协作流程；4、GitHub建立私有仓库才会收费，所以会有很多开源代码。 GitHub Pages是什么应用GitHub Pages创建属于自己的个人博客，GitHub将提供免费的空间。GitHub提供的域名（用户名+github+io）,在Repository name对应处填写资源名，其需要使用自己的用户名，每个用户名下面只能建立一个，并且资源命名必须符合这样的规则username/username.github.io，之后勾选下面的”Initialize this repository with a README” 。 hexo出自何人hexo出自台湾大学生 tommy351 之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。 安装准备 环境搭建： Node.js：下载地址 Git：下载地址 Sublime：下载地址安装Node到 Node.js 官网下载相应平台的 最新版本 ，一路安装即可。我用的是 node-v0.10.22-x86.msi安装GitGit的客户端很多，我用的是 msysgit ，喜欢用绿色版本 Portable application for official Git for Windows 1.8.4 ，下载下来设置一下环境变量即可，Git_HOME，%Git_HOME%\bin之类的，不多说。安装SublimeSublime Text 2 在这里仅仅作为一个文本编辑器使用，支持各种编程语言和文件格式，当然也支持Markdown语法，实在是个不可多得的练码奇才。喜欢追鲜的也可以尝试处于beta版本的 Sublime Text 3 。 GitHub注册与配置 注册：访问：GitHub，注册你的username和邮箱，邮箱十分重要，GitHub上很多通知都是通过邮箱的。注册过程比较简单，详细也可以看：使用Github Page搭建博客, 需要遵循一定的规则, 需要在github建立仓库,仓库名为Github用户.github.io, 更多详情请参考官方文档 配置和使用Github以下教程主要参考beiyuu的《使用Github Pages建独立博客》写成。 配置SSH keys我们如何让本地git项目与远程的github建立联系呢？用SSH keys。打开Git Bash工具，执行以下操作 检查SSH keys的设置 123456789101112 首先我们需要检查你电脑上现有的ssh key：$ cd ~/. ssh 检查本机的ssh密钥 如果提示：No such file or directory 说明你是第一次使用git。 生成新的SSH Key：$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt; 注意1: 此处的邮箱地址，你可以输入自己的邮箱地址；注意2: 此处的「-C」的是大写的「C」 然后系统会要你输入密码： Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;Enter same passphrase again:&lt;再次输入加密串&gt; 在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。 注意：输入密码的时候没有*字样的，你直接输入就可以了。 最后看到这样的界面，就成功设置ssh key了：12 添加SSH Key到GitHub在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。 打开本地C:\Documents and Settings\Administrator.ssh\id_rsa.pub文件。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。 登陆github系统。点击右上角的 Account Settings—&gt;SSH Public keys —&gt; add another public keys 把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了 测试 1234567891011121314151617181920212223242526 可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：$ ssh -T git@github.com 如果是下面的反馈：The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 不要紧张，输入yes就好，然后会看到：Hi cnfeat! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 设置用户信息： 现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。 Git会根据用户的名字和邮箱来记录提交。 GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。$ git config --global user.name &quot;cnfeat&quot;//用户名$ git config --global user.email &quot;cnfeat@gmail.com&quot;//填写自己的邮箱 SSH Key配置成功，本机已成功连接到github。 Hexo博客 HexoHexo的作者是tommy351，根据官方介绍，Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式。hexo的主题列表 Hexo Themes。 我比较喜欢 pacman ， modernist 、 ishgo ， raytaylorism 。 安装Hexo打开Git Bash工具（前提确保Node.js已经安装，环境配置OK） $ npm install -g hexo 注释： 执行命令：npm install -g hexo，报错如下： 12345678910111213141516171819202122232425262728293031npm ERR! Error: shasum check failed for C:\Users\ADMINI~1\AppData\Local\Temp\npm-30024-KDJHJzgP\registry.npmjs.org\hexo-cli\-\hexo-cli-0.1.6.tgznpm ERR! Expected: 7dc3ab939d0889c4bed6a961605ff3e2d67f67a2npm ERR! Actual: 41de7d67a9b764352eb07c49c32fc38dd7f479b9npm ERR! From: https://registry.npmjs.org/hexo-cli/-/hexo-cli-0.1.6.tgznpm ERR! at d:\Program Files\nodejs\node_modules\npm\node_modules\sha\index.js:38:8npm ERR! at ReadStream.&lt;anonymous&gt; (d:\Program Files\nodejs\node_modules\npm\node_modules\sha\index.js:85:7)npm ERR! at ReadStream.emit (events.js:117:20)npm ERR! at _stream_readable.js:943:16npm ERR! at process._tickCallback (node.js:419:13)npm ERR! If you need help, you may report this *entire* log,npm ERR! including the npm and node versions, at:npm ERR! &lt;http://github.com/npm/npm/issues&gt;npm ERR! System Windows_NT 6.2.9200npm ERR! command &quot;d:\\Program Files\\nodejs\\node.exe&quot; &quot;d:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;-g&quot; &quot;hexo&quot;npm ERR! cwd C:\Users\Administrator\Desktopnpm ERR! node -v v0.10.31npm ERR! npm -v 1.4.23npm ERR! registry error parsing jsonnpm ERR!npm ERR! Additional logging details can be found in:npm ERR! C:\Users\Administrator\Desktop\npm-debug.lognpm ERR! not ok code 0 莫非是因为被墙了？换国内镜像源试试。npm config set registry=&quot;http://registry.cnpmjs.org&quot;， 然后再次执行npm install -g hexo，成功！ 部署Hexo123456789101112131415161718192021 在我的电脑中建立一个名字叫「Hexo」的文件夹，然后在此文件夹中右键打开Git Bash。$ hexo init 如果无法使用右击“Git Bash”，则可以切换到指定目录 UUhike@UUhike-pc MINGW64 ~$ cd j:/github/hexo UUhike@UUhike-pc MINGW64 /j/github/hexo 安装依赖包$ npm install Hexo随后会自动在目标文件夹建立网站所需要的所有文件。 现在我们已经搭建起本地的hexo博客了，执行以下命令(在H:\hexo)，然后到浏览器输入localhost:4000看看。 本地查看$ hexo generate #生成静态页面至public目录（最终上传这个文件到GitHub）$ hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server） 部署到GitHub123456789编辑E:\hexo下的_config.yml，修改Deployment部分：# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/luuman/luuman.github.io.git branch: master 注释： hexo d，执行该命令，报错： 1234567891011121314151617181920212223242526272829303132333435ERROR Deployer not found: git执行命令：npm install hexo-deployer-git --save再次执行hexo d,报错：INFO Deploying: gitINFO Clearing .deploy folder...INFO Copying files from public folder...warning: LF will be replaced by CRLF in 2015/05/30/hello-world/index.html.The file will have its original line endings in your working directory.......*** Please tell me who you are.Run git config --global user.email &quot;you@example.com&quot; git config --global user.name &quot;Your Name&quot;to set your account&apos;s default identity.Omit --global to set the identity only in this repository.fatal: unable to auto-detect email address (got &apos;Administrator@PC-201505290750.(none)&apos;)Username for &apos;https://github.com&apos;: voidkingPassword for &apos;https://voidking@github.com&apos;:error: src refspec master does not match any.error: failed to push some refs to &apos;https://github.com/voidking/voidking.github.io.git&apos;FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: error: src refspec master does not match any.error: failed to push some refs to &apos;https://github.com/voidking/voidking.github.io.git&apos; at ChildProcess.&lt;anonymous&gt; (E:\hexo\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:42:17) at ChildProcess.emit (events.js:98:17) at maybeClose (child_process.js:756:16) at Process.ChildProcess._handle.onexit (child_process.js:823:5) hexo d，执行该命令，报错： 复制cnfeat的主题以下进入复制主题环节，如果那一步出现问题，或者修改后没有显示修改的结果，建议来来一个，再看看，可以解决很多问题。 12345678910111213$ hexo clean$ hexo generate #生成静态页面至public目录（最终上传这个文件到GitHub）$ hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）建立了Hexo文件，复制我的主题了到themes文件夹中yilia$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yiliamodernist$ git clone https://github.com/heroicyang/hexo-theme-modernist.git themes/modernistjacman$ git clone https://github.com/cnfeat/cnfeat.git themes/jacman 启用cnfeat的主题修改Hexo目录下的config.yml配置文件中的theme属性，将其设置为jacman。同时请设置stylus属性中的compress值为true。theme: jacman 注意：Hexo有两个config.yml文件，一个在根目录，一个在theme下，此时修改的是在根目录下的。 更新主题 $ cd themes/jacman $ git pull 注意：为避免出错，请先备份你的_config.yml 文件后再升级本地查看调试 1234567891011121314$ hexo g #生成$ hexo s #启动本地服务，进行文章预览调试或者直接作用组合命令$ hexo deploy -g$ hexo server -g简写：hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 4、浏览器中查看效果 浏览器输入http://localhost:4000 ，查看搭建效果。此后的每次变更_config.yml文件或者上传文件都可以先用此命令调试，非常好用，尤其是当你想调试出自己想要的主题时。 #进阶篇：Hexo设置 网站搭建完成后，就可以根据自己爱好来对Hexo生成的网站进行设置了，对整站的设置，只要修改项目目录的hexo/_config.yml就可以了，这是我的设置，可供参考。 默认目录结构： 1234567891011.├── .deploy├── public├── scaffolds├── scripts├── source| ├── _drafts| └── _posts├── themes├── _config.yml└── package.json hexo/_config.yml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485# Hexo Configuration## Docs: http://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site #整站的基本信息title: 1000 words a Day #网站标题subtitle: Writing 1000 Words a Day Changes My Life #网站副标题description: 学习总结 思考感悟 知识管理 #网站描述author: cnFeat #网站作者，在下方显示email: cnFeat@gmail.com #联系邮箱language: zh-CN #主题实际的文件名称timezone:# URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://yoursite.comroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writing 文章布局、写作格式的定义，不修改new_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: true tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format 日期格式，不修改## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination 每页显示文章数，可以自定义，我将10改成了5## Set per_page to 0 to disable paginationper_page: 5pagination_dir: page# Disqus Disqus插件，我们会替换成“多说”，不修改disqus_shortname:# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: spfk# 自动生成sitemapsitemap:path: sitemap.xmlbaidusitemap:path: baidusitemap.xml# Deployment 站点部署到github要配置，上一节中已经讲过## Docs: http://zespia.tw/hexo/docs/deploy.htmldeploy: type: git repository: git@github.com:luuman/luuman.github.io.git branch: master 修改局部页面 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\themes\主题名称\中： hexo\themes\ 1234567891011121314151617├── languages #多语言| ├── default.yml#默认语言| └── zh-CN.yml #中文语言├── layout #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制| ├── _partial #局部的布局，此目录下的*.ejs是对头尾等局部的控制| └── _widget#小挂件的布局，页面下方小挂件的控制├── source #源码| ├── css#css源码 | | ├── _base #*.styl基础css| | ├── _partial #*.styl局部css| | ├── fonts #字体| | ├── images #图片| | └── style.styl #*.styl引入需要的css源码| ├── fancybox #fancybox效果源码| └── js #javascript源代码├── _config.yml#主题配置文件└── README.md #用GitHub的都知道 主题文档的配置 hexo\themes/_config.yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# Headermenu: 主页: / 所有文章: /archives # 随笔: /tags/随笔# SubNavsubnav: github: &quot;#&quot; weibo: &quot;#&quot; rss: &quot;#&quot; zhihu: &quot;#&quot; #douban: &quot;#&quot; #mail: &quot;#&quot; #facebook: &quot;#&quot; #google: &quot;#&quot; #twitter: &quot;#&quot; #linkedin: &quot;#&quot;rss: /atom.xml# Contentexcerpt_link: morefancybox: truemathjax: true# Miscellaneousgoogle_analytics: &apos;&apos;favicon: /favicon.png#你的头像urlavatar: &quot;&quot;#是否开启分享share: true#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key（http://duoshuo-key.duoshuo.com/）#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论duoshuo: true#是否开启云标签tagcloud: true#是否开启友情链接#不开启——#friends: false#开启——friends: 奥巴马的博客: http://localhost:4000/ 卡卡的美丽传说: http://localhost:4000/ 本泽马的博客: http://localhost:4000/ 吉格斯的博客: http://localhost:4000/ 习大大大不同: http://localhost:4000/ 托蒂的博客: http://localhost:4000/#是否开启“关于我”。#不开启——#aboutme: false#开启——aboutme: 我是谁，我从哪里来，我到哪里去？我就是我，是颜色不一样的吃货… 参考资料：hexo你的博客如何搭建一个独立博客——简明Github Pages与Hexo教程Hexo的使用介绍Hexo插件安装]]></content>
    </entry>

    
  
  
</search>
